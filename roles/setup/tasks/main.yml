---
- name: Add blueteam user
  ansible.builtin.user: 
    name: blueteam
    state: present
    password: "{{ blueteam_password | password_hash('sha512') }}"
    shell: /bin/bash

- name: Add blueteam user to admin groups
  ansible.builtin.user:
    name: blueteam
    groups: '{{ item }}'
    append: yes
  with_items:
    - "sudo"
    - "wheel"
    - "adm"
    - "blueteam"
  ignore_errors: yes

- name: Add key to blueteam user
  ansible.posix.authorized_key:
    user: blueteam
    state: present
    key: "{{ lookup('file', '/opt/inventory/id_ed25519.pub') }}"

- name: Create backup directory
  ansible.builtin.file:
    path: "{{ backup_dir }}"
    owner: blueteam
    group: blueteam
    state: directory

- name: Create quarantine directory
  ansible.builtin.file:
    path: "{{ quarantine }}"
    owner: blueteam
    group: blueteam
    state: directory

- name: Create inventory directory
  ansible.builtin.file:
    path: "/opt/inventory"
    owner: blueteam
    group: blueteam
    state: directory
    mode: 0755
    
- name: Create hosts list
  set_fact:
    build_hosts: |
      {% for host in groups['all'] %}
      {{ hostvars[host]['inventory_hostname'] }} {{ hostvars[host]['ansible_hostname'] }}
      {% endfor %}

- name: Append to /etc/hosts our new hosts
  lineinfile:
    path: /etc/hosts
    state: present
    insertafter: EOF
    line: "{{ item }}"
  with_items: "{{ build_hosts.split('\n') }}"
  when: build_hosts is defined
  
- name: Append hosts to /etc/hosts on ansible controller
  lineinfile:
    path: /etc/hosts
    state: present
    insertafter: EOF
    line: "{{ item }}"
  with_items: "{{ build_hosts.split('\n') }}"
  when: build_hosts is defined
  delegate_to: localhost

# - name: Compare sources.list (Debian/Ubuntu)
#   shell: diff /etc/apt/sources.list files/sources.list
#   register: diff
#   ignore_errors: yes
#   changed_when: diff.rc == 1
#   when: ansible_facts['os_family'] == 'Debian'

# in Debian, all repos are in /etc/apt/sources.list
- name: Copy sources.list (Debian/Ubuntu)
  ansible.builtin.copy:
    src: files/sources.list
    dest: /etc/apt/sources.list
    owner: root
    group: root
    mode: 0644
  when: ansible_facts['os_family'] == 'Debian'

# in RHEL, each repo is its own file in /etc/yum.repos.d/
# - name: Copy over repo files (RHEL/CentOS)
#   ansible.builtin.copy:
#     src: "files/{{ item }}"
#     dest: "/etc/yum.repos.d/{{ item }}"
#     owner: root
#     group: root
#     mode: 0644
#   with_items:
#     - "rhel.repo"
#     - "epel.repo"
#   when: ansible_facts['os_family'] == 'RedHat'
# TODO: find good repos because they vary by version, hard to be dynamic

# in SUSE, each repo is its own file in /etc/zypp/repos.d/
# - name: Copy over repo files (SUSE)
#   ansible.builtin.copy:
#     src: "files/{{ item }}"
#     dest: "/etc/zypp/repos.d/{{ item }}"
#     owner: root
#     group: root
#     mode: 0644
#   with_items:
#     - "suse.repo"
#   when: ansible_facts['os_family'] == 'Suse'
# TODO: same thing with this, need to find file maybe from clean install bc bad sources online

- name: Update the package cache and all packages (Debian/Ubuntu)
    ansible.builtin.apt:
      update_cache: yes # Equivalent of "apt-get update"
      name: "*"
      state: latest # Update all packages to their latest version
    when: ansible_facts['os_family'] == 'Debian'

- name: Upgrade all packages (RHEL/CentOS)
    ansible.builtin.dnf:
      name: "*"
      state: latest
    when: ansible_facts['os_family'] == 'RedHat'

- name: Upgrade all packages (SUSE)
  community.general.zypper:
    name: "*"
    state: latest
  when: ansible_facts['os_family'] == 'Suse'

- name: Install Common Packages
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - "vim"
    - "curl"
    - "iptables"
    - "git"
    - "python3-pip"
    - "snoopy"
    - "lynis"
    - "iptables-persistent"
    - "nethogs"
    - "rkhunter"
  ignore_errors: yes