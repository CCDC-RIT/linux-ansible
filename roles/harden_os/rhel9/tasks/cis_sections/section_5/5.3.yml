---

- name: "5.3.1.1 | PATCH | Ensure latest version of pam is installed"
  ansible.builtin.package:
    name: pam
    state: latest
  when:
    - rule_5_3_1_1
    - ansible_facts.packages['pam'][0]['version'] is version('1.5.1-19', '<') or
      "'pam' not in ansible_facts.packages"

- name: "5.3.1.2 | PATCH | Ensure latest version of authselect is installed"
  block:
    - name: "5.3.1.2 | Patch"
      ansible.builtin.package:
        name: authselect
        state: latest
      register: discovered_authselect_updated

    - name: "5.3.1.2 | Patch"
      ansible.builtin.set_fact:
        authselect_update: OK
      when: discovered_authselect_updated.changed  # noqa no-handler
  when:
    - rule_5_3_1_2
    - authselect_pkg_update
    - ansible_facts.packages['authselect'][0]['version'] is version('1.2.6-2', '<') or
      "'authselect' not in ansible_facts.packages"

- name: "5.3.1.3 | PATCH | Ensure libpwquality is installed"
  ansible.builtin.package:
    name: libpwquality
    state: latest
  when:
    - rule_5_3_1_3
    - ansible_facts.packages['libpwquality'][0]['version'] is version('1.4.4-8', '<') or
      "'libpwquality' not in ansible_facts.packages"

- name: "5.3.2.1 | PATCH | Ensure active authselect profile includes pam modules"
  block:
    - name: "5.3.2.1 | Create custom profiles"
      ansible.builtin.command: "/usr/bin/authselect create-profile {{ authselect_custom_profile_name }} -b {{ authselect_default_profile_to_copy }}"
      changed_when: false
      args:
        creates: "/etc/authselect/custom/{{ authselect_custom_profile_name }}"
      when:
        - authselect_custom_profile_name not in prelim_authselect_current_profile.stdout or
          prelim_authselect_current_profile.stdout is not defined

    - name: "5.3.2.1 | get profile features"
      ansible.builtin.command: "/usr/bin/authselect list-features custom/{{ authselect_custom_profile_name }}"
      changed_when: false
      register: discovered_authselect_profile_features

    - name: "5.3.2.1 | Add missing pam modules to config | pwquality"
      ansible.builtin.lineinfile:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^password\s*requisite\s*pam_pwquality.so.*
        line: password    requisite                                    pam_pwquality.so local_users_only        {include if "with-pwquality"}
      loop:
        - system
        - password
      when: "'with-pwquality' not in discovered_authselect_profile_features.stdout_lines"

    - name: "5.3.2.1 | Backup and Add pam modules"
      ansible.builtin.command: "/usr/bin/authselect select custom/{{ authselect_custom_profile_name }} with-faillock with-pwquality with-pwhistory without-nullok --force --backup=rhel9cis-preremediate-2025-01-14-1345"
      changed_when: true
  when:
    - rule_5_3_2_1
    - disruption_high
    - allow_authselect_updates

- name: "5.3.2.2 | PATCH | Ensure pam_faillock module is enabled"
  block:
    - name: "5.3.2.2 | Get current config"
      ansible.builtin.shell: |
        authselect current | grep faillock
      changed_when: false
      failed_when: discovered_authselect_current_faillock.rc not in [ 0, 1 ]
      register: discovered_authselect_current_faillock

    - name: "5.3.2.2 | Add feature if missing"  # noqa syntax-check[specific]"
      ansible.builtin.command: "/usr/bin/authselect select custom/{{ authselect_custom_profile_name }} with-faillock with-faillock with-pwquality with-pwhistory without-nullok"
      changed_when: true
      when: discovered_authselect_current_faillock.rc != 0
  when:
    - rule_5_3_2_2
    - disruption_high
    - allow_authselect_updates

- name: "5.3.2.3 | PATCH | Ensure pam_pwquality module is enabled"
  block:
    - name: "5.3.2.3 | Get current config"
      ansible.builtin.shell: |
        authselect current | grep quality
      changed_when: false
      failed_when: discovered_authselect_current_quality.rc not in [ 0, 1 ]
      register: discovered_authselect_current_quality

    - name: "5.3.2.3 | Add feature if missing"
      ansible.builtin.command: "/usr/bin/authselect select custom/{{ authselect_custom_profile_name }} with-faillock with-faillock with-pwquality with-pwhistory without-nullok"
      changed_when: true
      when: discovered_authselect_current_quality.rc != 0
  when:
    - rule_5_3_2_3
    - disruption_high
    - allow_authselect_updates

- name: "5.3.2.4 | PATCH | Ensure pam_pwhistory module is enabled"
  block:
    - name: "5.3.2.4 | Get current config"
      ansible.builtin.shell: |
        authselect current | grep pwhistory
      changed_when: false
      failed_when: discovered_authselect_current_history.rc not in [ 0, 1 ]
      register: discovered_authselect_current_history

    - name: "5.3.2.4 | enable feature"
      ansible.builtin.command: "/usr/bin/authselect select custom/{{ authselect_custom_profile_name }} with-faillock with-pwquality with-pwhistory without-nullok"
      changed_when: true
      when: discovered_authselect_current_history.rc != 0
  when:
    - rule_5_3_2_4
    - disruption_high
    - allow_authselect_updates

- name: "5.3.2.5 | PATCH | Ensure pam_unix module is enabled"
  block:
    - name: "5.3.2.5"
      ansible.builtin.shell: grep -P -- '\b(pam_unix\.so)\b' /etc/authselect/"$(head -1 /etc/authselect/authselect.conf)"/{system,password}-auth
      changed_when: false
      failed_when: discovered_authselect_pam_unix.rc not in [ 0, 1 ]
      register: discovered_authselect_pam_unix

    - name: "5.3.2.5 | system-auth"
      ansible.builtin.lineinfile:
        path: /etc/authselect/custom/{{ authselect_custom_profile_name }}/system-auth
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backrefs: true
        insertafter: "{{ item.after | default(omit) }}"
        insertbefore: "{{ item.before | default(omit) }}"
        loop:
          - { regexp: '^(auth\s+)sufficient(\s+pam_unix.so.*)(.*)', line: '\1sufficient\2\3', after: '^auth.*pam_faillock.*preauth' }
          - { regexp: '^(password\s+)sufficient(\s+pam_unix.so.*)(.*)', line: '\1sufficient\2\3', before: '^password.*pam_deny.so' }
      when: "'system-auth:password' not in discovered_authselect_pam_unix.stdout"

    - name: "5.3.2.5 | password-auth"
      ansible.builtin.lineinfile:
        path: /etc/authselect/custom/{{ authselect_custom_profile_name }}/password-auth
        line: "{{ item.line }}"
        regexp: "{{ item.regexp }}"
        backrefs: true
        insertafter: "{{ item.after | default(omit) }}"
        insertbefore: "{{ item.before | default(omit) }}"
        loop:
          - { regexp: '^(auth\s+)sufficient(\s+pam_unix.so.*)(.*)', line: '\1sufficient\2\2', after: '^auth.*pam_faillock.*preauth' }
          - { regexp: '^(password\s+)sufficient(\s+pam_unix.so.*)(.*)', line: '\1sufficient\2\3', before: '^password.*pam_deny.so' }
      when: "'password-auth:password' not in discovered_authselect_pam_unix.stdout"
  when:
    - rule_5_3_2_5
    - disruption_high
    - allow_authselect_updates

- name: "5.3.3.1.1 | PATCH | Ensure password failed attempts lockout is configured"
  block:
    - name: "5.3.3.1.1 | faillock.conf"
      ansible.builtin.lineinfile:
        path: /etc/security/faillock.conf
        state: present
        regexp: '^(#|)\s*deny\s*=\s*\d'
        line: "deny = {{ pam_faillock_deny }}"

    - name: "5.3.3.1.1 | remove deny from pam files NOT AuthSelect"
      ansible.builtin.replace:
        path: "/etc/pam.d/{{ item }}-auth"
        regexp: ^(\s*auth\s+(requisite|required|sufficient)\s+pam_faillock\.so)(.*)\s+deny\s*=\s*\S+(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - allow_authselect_updates
        - disruption_high

    - name: "5.3.3.1.1 | remove deny from AuthSelect config"
      ansible.builtin.replace:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*auth\s+(requisite|required|sufficient)\s+pam_faillock\.so)(.*)\s+deny\s*=\s*\S+(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - allow_authselect_updates
        - disruption_high
  when: rule_5_3_3_1_1

- name: "5.3.3.1.2 | PATCH | Ensure password unlock time is configured"
  block:
    - name: "5.3.3.1.2 | faillock.conf"
      ansible.builtin.lineinfile:
        path: /etc/security/faillock.conf
        state: present
        regexp: '^(#|)\s*unlock_time\s*=\s*\d'
        line: "unlock_time = {{ pam_faillock_unlock_time }}"

    - name: "5.3.3.1.2 | remove unlock from pam files NOT AuthSelect"
      ansible.builtin.replace:
        path: "/etc/pam.d/{{ item }}-auth"
        regexp: ^(\s*auth\s+(requisite|required|sufficient)\s+pam_faillock\.so)(.*)\s+unlock_time\s*=\s*\S+(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - disruption_high
        - not allow_authselect_updates

    - name: "5.3.3.1.2 | remove unlock from pam files AuthSelect"
      ansible.builtin.replace:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*auth\s+(requisite|required|sufficient)\s+pam_faillock\.so)(.*)\s+unlock_time\s*=\s*\S+(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - allow_authselect_updates
        - disruption_high
  when: rule_5_3_3_1_2

- name: "5.3.3.1.3 | PATCH | Ensure password failed attempts lockout includes root account"
  block:
    - name: "5.3.3.1.3 | configure faillock.conf"
      ansible.builtin.lineinfile:
        path: /etc/security/faillock.conf
        regexp: '^{{ pamroot_lock_option }}'
        line: "{{ pamroot_lock_option }}"
        insertafter: '^# end of pam-auth-update config'
        create: true
        mode: 'u-x,go-wx'

    - name: "5.3.3.1.3 | remove lockout from pam files NOT AuthSelect"
      ansible.builtin.replace:
        path: "/etc/pam.d/{{ item }}-auth"
        regexp: ^(\s*auth\s+(requisite|required|sufficient)\s+pam_faillock\.so)(.*)\s(even_deny_root|root_unlock_time=\d*)"(\s*=\s*\d|.*)\S+(.*$)
        replace: \1\2\4
      loop:
        - password
        - system
      when:
        - disruption_high
        - not allow_authselect_updates

    - name: "5.3.3.1.3 | remove lockout from pam files AuthSelect"
      ansible.builtin.replace:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*auth\s+(requisite|required|sufficient)\s+pam_faillock\.so)(.*)\s(even_deny_root|root_unlock_time=\d*)"(\s*=\s*\d|.*)\S+(.*$)
        replace: \1\2\4
      loop:
        - password
        - system
      when:
        - allow_authselect_updates
        - disruption_high
  when: rule_5_3_3_1_3

- name: "5.3.3.2.1 | PATCH | Ensure password number of changed characters is configured"
  block:
    - name: "5.3.3.2.1 | Remove difok from conf files except expected file"
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: 'difok\s*=\s*\d+\b'
        replace: ''
      with_fileglob:
        - '/etc/security/pwquality.conf'
        - '/etc/security/pwquality.conf.d/*.conf'
        - /etc/pam.d/*-auth
      when:
        - item != passwd_difok_file
        - disruption_high

    - name: "5.3.3.2.1 | Ensure difok file exists"
      ansible.builtin.template:
        src: "{{ ansible_dir }}/rhel9/templates/{{ passwd_difok_file }}.j2"
        dest: "/{{ passwd_difok_file }}"
        owner: root
        group: root
        mode: 'go-rwx'

    - name: "5.3.3.2.1 | Remove difok from pam files Not AuthSelect"
      ansible.builtin.replace:
        path: "/etc/pam.d/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so)(.*)\sdifok=\d*(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - not allow_authselect_updates
        - disruption_high

    - name: "5.3.3.2.1 | Remove difok from pam files AuthSelect"
      ansible.builtin.replace:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so)(.*)\sdifok=\d*(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - allow_authselect_updates
        - disruption_high
  when: rule_5_3_3_2_1

- name: "5.3.3.2.2 | PATCH | Ensure password length is configured"
  block:
    - name: "5.3.3.2.2 | Remove minlen from conf files except expected file"
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: 'minlen\s*=\s*\d+\b'
        replace: ''
      with_fileglob:
        - '/etc/security/pwquality.conf'
        - '/etc/security/pwquality.conf.d/*.conf'
        - '/etc/pam.d/*-auth'
      when:
        - item != passwd_minlen_file
        - disruption_high

    - name: "5.3.3.2.2 | Ensure minlen file exists"
      ansible.builtin.template:
        src: "{{ ansible_dir }}/rhel9/templates/{{ passwd_minlen_file }}.j2"
        dest: "/{{ passwd_minlen_file }}"
        owner: root
        group: root
        mode: 'go-rwx'

    - name: "5.3.3.2.2 | Remove minlen from pam files NOT AuthSelect"
      ansible.builtin.replace:
        path: "/etc/pam.d/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so)(.*)\sminlen=\d*(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - not allow_authselect_updates
        - disruption_high

    - name: "5.3.3.2.2 | Remove minlen from pam files AuthSelect"
      ansible.builtin.replace:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so)(.*)\sminlen=\d*(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - allow_authselect_updates
        - disruption_high
  when: rule_5_3_3_2_2

- name: "5.3.3.2.3 | PATCH | Ensure password complexity is configured"
  block:
    - name: "5.3.3.2.3 | Remove pwd complex settings from conf files except expected file"
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: '(minclass|[dulo]credit)\s*=\s*(-\d|\d+)\b'
        replace: ''
      with_fileglob:
        - '/etc/security/pwquality.conf'
        - '/etc/security/pwquality.conf.d/*.conf'
        - '/etc/pam.d/*-auth'
      when:
        - item != passwd_complex_file
        - disruption_high

    - name: "5.3.3.2.3 | Ensure complexity file exists"
      ansible.builtin.template:
        src: "{{ ansible_dir }}/rhel9/templates/{{ passwd_complex_file }}.j2"
        dest: "/{{ passwd_complex_file }}"
        owner: root
        group: root
        mode: 'go-rwx'

    - name: "5.3.3.2.3 | Remove complexity from pam files NOT AuthSelect"
      ansible.builtin.replace:
        path: "/etc/pam.d/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so)(.*)\s(minclass=[0-3]|[dulo]credit=[^-]\d*)(.*$)
        replace: \1\2\4
      loop:
        - password
        - system
      when:
        - not allow_authselect_updates
        - disruption_high

    - name: "5.3.3.2.3 | Remove complexity from pam files AuthSelect"
      ansible.builtin.replace:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so)(.*)\s(minclass=[0-3]|[dulo]credit=[^-]\d*)(.*$)
        replace: \1\2\4
      loop:
        - password
        - system
      when:
        - allow_authselect_updates
        - disruption_high
  when: rule_5_3_3_2_3

- name: "5.3.3.2.4 | PATCH | Ensure password same consecutive characters is configured"
  block:
    - name: "5.3.3.2.4 | Remove maxrepeat settings from conf files except expected file"
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: 'maxrepeat\s*=\s*\d+\b'
        replace: ''
      with_fileglob:
        - '/etc/security/pwquality.conf'
        - '/etc/security/pwquality.conf.d/*.conf'
        - '/etc/pam.d/*-auth'
      when: item != passwd_maxrepeat_file

    - name: "5.3.3.2.4 | Ensure maxrepeat file exists"
      ansible.builtin.template:
        src: "{{ ansible_dir }}/rhel9/templates/{{ passwd_maxrepeat_file }}.j2"
        dest: "/{{ passwd_maxrepeat_file }}"
        owner: root
        group: root
        mode: 'go-rwx'

    - name: "5.3.3.2.4 | Remove maxrepeat from pam files NOT AuthSelect"
      ansible.builtin.replace:
        path: "/etc/pam.d/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so)(.*)\smaxrepeat\s*=\s*\d*(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - not allow_authselect_updates
        - disruption_high

    - name: "5.3.3.2.4 | Remove maxrepeat from pam files AuthSelect"
      ansible.builtin.replace:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so)(.*)\smaxrepeat\s*=\s*\d*(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - allow_authselect_updates
        - disruption_high
  when: rule_5_3_3_2_4

- name: "5.3.3.2.5 | PATCH | Ensure password maximum sequential characters is is configured"
  block: 
    - name: "5.3.3.2.5 | Remove maxsequence settings from conf files except expected file"
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: 'maxsequence\s*=\s*\d+\b'
        replace: ''
      with_fileglob:
        - '/etc/security/pwquality.conf'
        - '/etc/security/pwquality.conf.d/*.conf'
        - '/etc/pam.d/*-auth'
      when:
        - item != passwd_maxsequence_file
        - disruption_high

    - name: "5.3.3.2.5 | Ensure maxsequence file exists"
      ansible.builtin.template:
        src: "{{ ansible_dir }}/rhel9/templates/{{ passwd_maxsequence_file }}.j2"
        dest: "/{{ passwd_maxsequence_file }}"
        owner: root
        group: root
        mode: 'go-rwx'

    - name: "5.3.3.2.5 | Remove maxsequence from pam files NOT AuthSelect"
      ansible.builtin.replace:
        path: "/etc/pam.d/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so)(.*)\smaxsequence\s*=\s*\d*(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - not allow_authselect_updates
        - disruption_high

    - name: "5.3.3.2.5 | Remove maxsequence from pam files AuthSelect"
      ansible.builtin.replace:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so)(.*)\smaxsequence\s*=\s*\d*(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - allow_authselect_updates
        - disruption_high
  when: rule_5_3_3_2_5

- name: "5.3.3.2.6 | PATCH | Ensure password dictionary check is enabled"
  block:
    - name: "5.3.3.2.6 | Remove dictcheck settings from conf files except expected file"
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: 'dictcheck\s*=\s*\d+\b'
        replace: ''
      with_fileglob:
        - '/etc/security/pwquality.conf'
        - '/etc/security/pwquality.conf.d/*.conf'
        - '/etc/pam.d/*-auth'
      when:
        - item != passwd_dictcheck_file

    - name: "5.3.3.2.6 | Ensure dictcheck file exists"
      ansible.builtin.template:
        src: "{{ ansible_dir }}/rhel9/templates/{{ passwd_dictcheck_file }}.j2"
        dest: "/{{ passwd_dictcheck_file }}"
        owner: root
        group: root
        mode: 'go-rwx'

    - name: "5.3.3.2.6 | Remove dictcheck from pam files NOT AuthSelect"
      ansible.builtin.replace:
        path: "/etc/pam.d/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so)(.*)\sdictcheck\s*=\s*\d*(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - not allow_authselect_updates
        - disruption_high

    - name: "5.3.3.2.6 | Remove dictcheck from pam files AuthSelect"
      ansible.builtin.replace:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so)(.*)\sdictcheck\s*=\s*\d*(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - allow_authselect_updates
        - disruption_high
  when: rule_5_3_3_2_6

- name: "5.3.3.2.7 | PATCH | Ensure password quality is enforced for the root user"
  ansible.builtin.template:
    src: "{{ ansible_dir }}/rhel9/templates/{{ passwd_quality_enforce_root_file }}.j2"
    dest: "/{{ passwd_quality_enforce_root_file }}"
    owner: root
    group: root
    mode: 'o-rwx'
  when: rule_5_3_3_2_7

- name: "5.3.3.3.1 | PATCH | Ensure password history remember is configured"
  block:
    - name: "5.3.3.3.1 | Check existing files"
      ansible.builtin.shell: grep -Psi -- '^\h*password\s+[^#\n\r]+\h+pam_pwhistory\.so\s+([^#\n\r]+\s+)?remember=\d+\b' /etc/pam.d/password-auth /etc/pam.d/system-auth
      changed_when: false
      failed_when: discovered_pwhistory_remember.rc not in [0, 1]
      register: discovered_pwhistory_remember

    - name: "5.3.3.3.1 | Ensure remember is set pwhistory file"
      ansible.builtin.lineinfile:
        path: "/etc/security/pwhistory.conf"
        regexp: remember\s*=\s*\d*
        line: remember = {{ pamd_pwhistory_remember }}

    - name: "5.3.3.3.1 | Remove remember from pam files NOT AuthSelect"
      ansible.builtin.replace:
        path: "/etc/pam.d/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwhistory\.so)(.*)\sremember=\d*(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - not allow_authselect_updates
        - disruption_high

    - name: "5.3.3.3.1 | Remove remember from pam files AuthSelect"
      ansible.builtin.replace:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwhistory\.so)(.*)\sremember=\d*(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when:
        - allow_authselect_updates
        - disruption_high
  when: rule_5_3_3_3_1

- name: "5.3.3.3.2 | PATCH | Ensure password history is enforced for the root user"
  block:
    - name: "5.3.3.3.2 | Check existing files"
      ansible.builtin.shell: grep -Psi -- '^\h*password\h+[^#\n\r]+\h+pam_pwhistory\.so\h+([^#\n\r]+\h+)?enforce_for_root\b' /etc/pam.d/{system,password}-auth
      register: discovered_pwhistory_enforce_for_root
      changed_when: false
      failed_when: discovered_pwhistory_enforce_for_root.rc not in [0, 1]

    - name: "5.3.3.3.2 | Ensure enforce_for_root is set pwhistory file"
      ansible.builtin.lineinfile:
        path: "/etc/security/pwhistory.conf"
        regexp: ^\s*(?#)enforce_for_root
        line: enforce_for_root

    - name: "5.3.3.3.2 | Ensure enforce_for_root is set"
      ansible.builtin.lineinfile:
        path: "/{{ pam_confd_dir }}{{ pam_pwhistory_file }}"
        regexp: ^(password\h+[^#\n\r]+\h+pam_pwhistory\.so\h+)(.*)(enforce_for_root)
        line: '\1\2\3 enforce_for_root'
        backrefs: true
      when:
        - not allow_authselect_updates
        - discovered_pwhistory_enforce_for_root.stdout | length == 0
        - disruption_high

    - name: "5.3.3.3.2 | Ensure enforce_for_root is set"
      ansible.builtin.replace:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwhistory\.so)(.*)\senforce_for_root(.*$)
        replace: \1\2enforce_for_root\3
      loop:
        - password
        - system
      when:
        - allow_authselect_updates
        - discovered_pwhistory_enforce_for_root.stdout | length == 0
        - disruption_high
  when: rule_5_3_3_3_2

- name: "5.3.3.3.3 | PATCH | Ensure pam_pwhistory includes use_authtok"
  block:
    - name: "5.3.3.3.3 | Check existing files"
      ansible.builtin.shell: grep -Psi -- '^\h*password\h+[^#\n\r]+\h+pam_pwhistory\.so\h+([^#\n\r]+\h+)?use_authtok\b' /etc/pam.d/{system,password}-auth
      register: discovered_pwhistory_use_authtok
      changed_when: false
      failed_when: discovered_pwhistory_use_authtok.rc not in [0, 1]

    - name: "5.3.3.3.3 | Update pwhistory for use_authtok"
      ansible.builtin.lineinfile:
        path: "/etc/security/pwhistory.conf"
        regexp: ^\s*(?#)use_authtok
        line: use_authtok

    - name: "5.3.3.3.3 | Ensure use_authtok is set"
      ansible.builtin.lineinfile:
        path: "/{{ pam_confd_dir }}{{ pam_pwhistory_file }}"
        regexp: ^(password\h+[^#\n\r]+\h+pam_pwhistory\.so\h+)(.*)(use_authtok)
        line: '\1\2 use_authtok'
        backrefs: true
      when:
        - not allow_authselect_updates
        - discovered_pwhistory_use_authtok.stdout | length == 0
        - disruption_high

    - name: "PATCH | add authtok to pam files AuthSelect"
      ansible.builtin.lineinfile:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_pwhistory\.so)(.*)\suse_authtok(.*$)
        line: \1\2 use_authtok\3
        backrefs: true
      loop:
        - password
        - system
      when:
        - allow_authselect_updates
        - discovered_pwhistory_use_authtok.stdout | length == 0
        - disruption_high
  when: rule_5_3_3_3_3

- name: "5.3.3.4.1 | PATCH | Ensure pam_unix does not include nullok"
  block:
    - name: "5.3.3.4.1 | capture state"
      ansible.builtin.shell: grep -E "pam_unix.so.*nullok" /etc/pam.d/*-auth | cut -d ':' -f1 | uniq
      changed_when: false
      failed_when: discovered_pam_nullok.rc not in [ 0, 1 ]
      register: discovered_pam_nullok

    - name: "5.3.3.4.1 | Ensure nullok removed"
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: nullok
        replace: ''
      loop: "{{ discovered_pam_nullok.stdout_lines }}"
      when:
        - discovered_pam_nullok.stdout | length > 0
        - not allow_authselect_updates

    - name: "5.3.3.4.1 | Remove nullok from pam files AuthSelect"
      ansible.builtin.replace:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_unix\.so)(.*)\snullok(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when: allow_authselect_updates
  when:
    - rule_5_3_3_4_1
    - disruption_high

- name: "5.3.3.4.2 | PATCH | Ensure pam_unix does not include remember"
  block:
    - name: "5.3.3.4.2 | capture state"
      ansible.builtin.shell: grep -E "password.*pam_unix.so.*remember" /etc/pam.d/*-auth | cut -d ':' -f1 | uniq
      changed_when: false
      failed_when: discovered_pam_remember.rc not in [ 0, 1 ]
      register: discovered_pam_remember

    - name: "5.3.3.4.2 | Ensure remember removed"
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: remember
        replace: ''
      loop: "{{ discovered_pam_remember.stdout_lines }}"
      when:
        - not allow_authselect_updates
        - discovered_pam_remember.stdout | length > 0

    - name: "5.3.3.4.2 | Remove remember from pam files AuthSelect"
      ansible.builtin.replace:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*password\s+(requisite|required|sufficient)\s+pam_unix\.so)(.*)\sremember\s*=\s*=\d*(.*$)
        replace: \1\2\3
      loop:
        - password
        - system
      when: allow_authselect_updates
  when:
    - rule_5_3_3_4_2
    - disruption_high

- name: "5.3.3.4.3 | PATCH | Ensure pam_unix includes a strong password hashing algorithm"
  block:
    - name: "5.3.3.4.3 | capture state"
      ansible.builtin.shell: grep -E "password.*pam_unix.so.*(sha512|yescrypt)" /etc/pam.d/*-auth | cut -d ':' -f1 | uniq
      changed_when: false
      failed_when: discovered_pam_pwhash.rc not in [ 0, 1 ]
      register: discovered_pam_pwhash

    - name: "5.3.3.4.3 | Ensure hash algorithm set"
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: "(md5|bigcrypt|sha256|blowfish|gost_yescrypt|sha512|yescrypt)"
        replace: '{{ passwd_hash_algo }}'
      loop: "{{ discovered_pam_remember.stdout_lines }}"
      when:
        - not allow_authselect_updates
        - discovered_pam_remember.stdout | length > 0

    - name: "5.3.3.4.3 | Add hash algorithm to pam files AuthSelect"
      ansible.builtin.lineinfile:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*password\s+)(requisite|required|sufficient)(\s+pam_unix.so\s)(.*)(sha512|yescrypt)(.*$)
        line: \1\2\3\4{{ passwd_hash_algo }}\6
        backrefs: true
      loop:
        - password
        - system
      when: allow_authselect_updates
  when:
    - rule_5_3_3_4_3
    - disruption_high

- name: "5.3.3.4.4 | PATCH | Ensure pam_unix includes use_authtok"
  block:
    - name: "5.3.3.4.4 | capture state"
      ansible.builtin.shell: grep -PH -- '^\h*^password\h*[^#\n\r]+\h+pam_unix.so\b' /etc/pam.d/{password,system}-auth | grep -Pv -- '\buse_authtok\b'
      changed_when: false
      failed_when: discovered_pam_authtok.rc not in [ 0, 1 ]
      register: discovered_pam_authtok

    - name: "5.3.3.4.4 | pam_files"
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        regexp: ^(\s*password\s+)(requisite|required|sufficient)(\s+pam_unix.so\s)(.*)use_authtok(.*$)
        line: \1\2\3\4use_authtok \5
        backrefs: true
      loop: "{{ discovered_pam_authtok.stdout_lines }}"
      when:
        - not allow_authselect_updates
        - discovered_pam_authtok is defined
        - discovered_pam_authtok.stdout | length > 0

    - name: "5.3.3.4.4 | Add use_authtok pam files AuthSelect"
      ansible.builtin.lineinfile:
        path: "/etc/authselect/custom/{{ authselect_custom_profile_name }}/{{ item }}-auth"
        regexp: ^(\s*password\s+)(requisite|required|sufficient)(\s+pam_unix.so\s)(.*)use_authtok(.*$)
        line: \1\2\3\4use_authtok\5
        backrefs: true
      loop:
        - password
        - system
      when: allow_authselect_updates
  when:
    - rule_5_3_3_4_4
    - disruption_high