---

- name: "5.2.1 | PATCH | Ensure sudo is installed"
  ansible.builtin.package:
    name: sudo
    state: present
  when: rule_5_2_1

- name: "5.2.2 | PATCH | Ensure sudo commands use pty"
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    line: "Defaults    use_pty"
    validate: '/usr/sbin/visudo -cf %s'
  when: rule_5_2_2

- name: "5.2.3 | PATCH | Ensure sudo log file exists"
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    regexp: '^Defaults    logfile='
    line: 'Defaults    logfile="{{ sudolog_location }}"'
    validate: '/usr/sbin/visudo -cf %s'
  when: rule_5_2_3

- name: "5.2.4 | PATCH | Ensure users must provide password for escalation"
  block:
    - name: "5.2.4 | Discover accts with NOPASSWD"
      ansible.builtin.shell: grep -Ei '(nopasswd)' /etc/sudoers /etc/sudoers.d/* | cut -d':' -f1
      become: true
      changed_when: false
      failed_when: false
      register: discovered_nopasswd_sudoers

    - name: "5.2.4 | Remove nopasswd for accounts not excluded"
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: '^((?!#|{% for name in sudoers_exclude_nopasswd_list %}{{ name }}{% if not loop.last -%}|{%- endif -%}{% endfor %}).*)NOPASSWD(.*)'
        replace: '\1PASSWD\2'
        validate: '/usr/sbin/visudo -cf %s'
      loop: "{{ discovered_nopasswd_sudoers.stdout_lines }}"
      when: discovered_nopasswd_sudoers.stdout | length > 0
  when: rule_5_2_4

- name: "5.2.5 | PATCH | Ensure re-authentication for privilege escalation is not disabled globally"
  block:
    - name: "5.2.5"
      ansible.builtin.shell: grep -Ei '(!authenticate)' /etc/sudoers /etc/sudoers.d/* | cut -d':' -f1
      become: true
      changed_when: false
      failed_when: false
      register: discovered_priv_reauth

    - name: "5.2.5"
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: '^([^#].*)!authenticate(.*)'
        replace: '\1authenticate\2'
        validate: '/usr/sbin/visudo -cf %s'
      loop: "{{ discovered_priv_reauth.stdout_lines }}"
      when: discovered_priv_reauth.stdout | length > 0
  when: rule_5_2_5

- name: "5.2.6 | PATCH | Ensure sudo authentication timeout is configured correctly"
  block:
    - name: "5.2.6 | Get files with timeout set"
      ansible.builtin.shell: grep -is 'timestamp_timeout' /etc/sudoers /etc/sudoers.d/* | cut -d":" -f1 | uniq | sort
      changed_when: false
      failed_when: false
      register: discovered_sudo_timeout_files

    - name: "5.2.6 | Set value if no results"
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        regexp: 'Defaults timestamp_timeout='
        line: "Defaults timestamp_timeout={{ sudo_timestamp_timeout }}"
        validate: '/usr/sbin/visudo -cf %s'
      when: discovered_sudo_timeout_files.stdout | length == 0

    - name: "5.2.6 | Set value if has results"
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: 'timestamp_timeout=(\d+)'
        replace: "timestamp_timeout={{ sudo_timestamp_timeout }}"
        validate: '/usr/sbin/visudo -cf %s'
      loop: "{{ discovered_sudo_timeout_files.stdout_lines }}"
      when: discovered_sudo_timeout_files.stdout | length > 0
  when: rule_5_2_6

- name: "5.2.7 | PATCH | Ensure access to the su command is restricted"
  block:
    - name: "5.2.7 | Ensure sugroup exists"
      ansible.builtin.group:
        name: "{{ sugroup }}"
        state: present
      register: discovered_sugroup

    - name: "5.2.7 | remove users from group"
      ansible.builtin.lineinfile:
        path: /etc/group
        regexp: '^{{ _sugroup }}(:.:.*:).*$'
        line: '{{ sugroup }}\g<1>'
        backrefs: true

    - name: "5.2.7 | Setting pam_wheel to use_uid"
      ansible.builtin.lineinfile:
        path: /etc/pam.d/su
        regexp: '^(#)?auth\s+required\s+pam_wheel\.so'
        line: 'auth           required        pam_wheel.so use_uid group={{ sugroup }}'
  when: rule_5_2_7