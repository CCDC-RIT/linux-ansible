---

- name: "5.4.1.1 | PATCH | Ensure password expiration is 365 days or less"
  block:
    - name: "5.4.1.1"
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        regexp: '^PASS_MAX_DAYS'
        line: "PASS_MAX_DAYS {{ pass_max_days }}"

    - name: "5.4.1.1 | Get existing users PASS_MAX_DAYS"
      ansible.builtin.shell: "awk -F: '(/^[^:]+:[^!*]/ && ($5> {{ pass_max_days }} || $5< {{ pass_max_days }} || $5 == -1)){print $1}' /etc/shadow"
      changed_when: false
      failed_when: false
      register: discovered_max_days

    - name: "5.4.1.1 | Set existing users PASS_MAX_DAYS"
      when:
        - discovered_max_days.stdout_lines | length > 0
        - item in prelim_interactive_usernames.stdout
        - force_user_maxdays
      ansible.builtin.user:
        name: "{{ item }}"
        password_expire_max: "{{ pass_max_days }}"
      loop: "{{ discovered_max_days.stdout_lines }}"

- name: "5.4.1.2 | PATCH | Ensure minimum password days is configured"
  block:
    - name: "5.4.1.2 | set login.defs"
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        regexp: '^PASS_MIN_DAYS'
        line: "PASS_MIN_DAYS {{ pass_min_days }}"

    - name: "5.4.1.2 | Get existing users PASS_MIN_DAYS"
      ansible.builtin.shell: "awk -F: '/^[^:]+:[^!*]/ && $4< {{ pass_min_days }} {print $1}' /etc/shadow"
      changed_when: false
      failed_when: false
      register: discovered_min_days

    - name: "5.4.1.2 | Set existing users PASS_MIN_DAYS"
      when:
        - discovered_min_days.stdout_lines | length > 0
        - item in prelim_interactive_usernames.stdout
        - force_user_mindays
      ansible.builtin.user:
        name: "{{ item }}"
        password_expire_max: "{{ pass_min_days }}"
      loop: "{{ discovered_min_days.stdout_lines }}"

- name: "5.4.1.3 | PATCH | Ensure password expiration warning days is configured"
  block:
    - name: "5.4.1.3 | set login.defs"
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        regexp: '^PASS_WARN_AGE'
        line: "PASS_WARN_AGE {{ pass_warn_age }}"

    - name: "5.4.1.3 | Get existing users WARN_DAYS"
      ansible.builtin.shell: "awk -F: '/^[^:]+:[^!*]/ && $6< {{ pass_warn_age }} {print $1}' /etc/shadow"
      changed_when: false
      failed_when: false
      register: discovered_warn_days

    - name: "5.4.1.3 | Set existing users WARN_DAYS"
      when:
        - discovered_warn_days.stdout_lines | length > 0
        - item in prelim_interactive_usernames.stdout
        - force_user_warnage
      ansible.builtin.command: "chage --warndays {{ pass['warn_age'] }} {{ item }}"
      changed_when: true
      loop: "{{ discovered_warn_days.stdout_lines }}"

- name: "5.4.1.4 | PATCH | Ensure strong password hashing algorithm is configured"
  ansible.builtin.lineinfile:
    path: /etc/login.defs
    regexp: '^ENCRYPT_METHOD'
    line: 'ENCRYPT_METHOD {{ passwd_hash_algo | upper }}'

- name: "5.4.1.5 | PATCH | Ensure inactive password lock is configured"
  block:
    - name: "5.4.1.5 | Check current settings"
      ansible.builtin.shell: |
        useradd -D | grep INACTIVE={{ inactivelock.lock_days }} | cut -f2 -d=
      changed_when: false
      failed_when: false
      check_mode: false
      register: discovered_passwdlck_inactive_settings

    - name: "5.4.1.5 | Set default inactive setting"
      when: discovered_passwdlck_inactive_settings.stdout | length == 0
      ansible.builtin.command: useradd -D -f {{ _inactivelock.lock_days }}
      changed_when: true

    - name: "5.4.1.5 | Getting user list"
      ansible.builtin.command: "awk -F: '/^[^#:]+:[^\\!\\*:]*:[^:]*:[^:]*:[^:]*:[^:]*:(\\s*|-1|3[1-9]|[4-9][0-9]|[1-9][0-9][0-9]+):[^:]*:[^:]*\\s*$/ {print $1}' /etc/shadow"
      changed_when: false
      check_mode: false
      register: discovered_passwdlck_user_list

    - name: "5.4.1.5 | Apply Inactive setting to existing accounts"
      when: item in prelim_interactive_usernames.stdout
      ansible.builtin.command: chage --inactive {{ inactivelock.lock_days }} "{{ item }}"
      changed_when: true
      loop: "{{ discovered_passwdlck_user_list.stdout_lines }}"

- name: "5.4.1.6 | PATCH | Ensure all users last password change date is in the past"
  block:
    - name: "5.4.1.6 | Get current date in Unix Time"
      ansible.builtin.shell: echo $(($(date --utc --date "$1" +%s)/86400))
      changed_when: false
      failed_when: false
      check_mode: false
      register: discovered_passwdlck_currentunixtime

    - name: "5.4.1.6 | Get list of users with last changed pw date in the future"
      ansible.builtin.shell: "cat /etc/shadow | awk -F: '{if($3>{{ discovered_passwdlck_currentunixtime.stdout }})print$1}'"
      changed_when: false
      failed_when: false
      check_mode: false
      register: discovered_passwdlck_user_future

    - name: "5.4.1.6 | Alert on accounts with pw change in the future"
      when:
        - discovered_passwdlck_user_future.stdout | length > 0
        - not futurepwchgdate_autofix
      ansible.builtin.debug:
        msg: "Warning!! The following accounts have the last PW change date in the future: {{ discovered_passwdlck_user_future.stdout_lines }}"

    - name: "5.4.1.6 | Fix accounts with pw change in the future"
      when:
        - discovered_passwdlck_user_future.stdout | length > 0
        - futurepwchgdate_autofix
      ansible.builtin.command: passwd --expire {{ item }}
      changed_when: true
      loop: "{{ discovered_passwdlck_user_future.stdout_lines }}"

- name: "5.4.2.1 | PATCH | Ensure root is the only UID 0 account"
  when:
    - prelim_uid_zero_accounts_except_root.rc
    - disruption_high
  ansible.builtin.command: passwd -l {{ item }}
  changed_when: false
  failed_when: false
  loop: "{{ prelim_uid_zero_accounts_except_root.stdout_lines }}"

- name: "5.4.2.2 | PATCH | Ensure root is the only GID 0 account"
  when:
    - disruption_high
  block:
    - name: "5.4.2.2 | Get members of gid 0"
      ansible.builtin.shell: "awk -F: '($1 !~ /^(sync|shutdown|halt|operator)/ && $4==\"0\") {print $1}' /etc/passwd | grep -wv 'root'"
      register: discovered_gid0_members
      changed_when: false
      failed_when: discovered_gid0_members.rc not in [ 0, 1 ]

    - name: "5.4.2.2 | Remove users not root from gid 0"
      when:
        - discovered_gid0_members is defined
        - discovered_gid0_members.stdout | length > 0
      ansible.builtin.user:
        name: "{{ item }}"
        group: root
        state: absent
      loop: "{{ discovered_gid0_members.stdout_lines }}"

- name: "5.4.2.3 | AUDIT | Ensure group root is the only GID 0 group"
  block:
    - name: "5.4.2.3 | Get groups with gid 0"
      ansible.builtin.shell: "awk -F: '$3==\"0\"{print $1}' /etc/group | grep -vw 'root'"
      register: discovered_gid0_groups
      changed_when: false
      failed_when: discovered_gid0_groups.rc not in [ 0, 1 ]

    - name: "5.4.2.3 | Warning if others gid 0 groups"
      when:
        - discovered_gid0_groups is defined
        - discovered_gid0_groups.stdout | length > 0
      ansible.builtin.debug:
        msg:
          - "Warning!! You have other groups assigned to GID 0 - Please resolve"
          - "{{ discovered_gid0_groups.stdout_lines }}"

- name: "5.4.2.4 | PATCH | Ensure root account access is controlled "
  ansible.builtin.debug:
    msg: "This is set as an assert in tasks/main"

- name: "5.4.2.5 | PATCH | Ensure root PATH Integrity"
  block:
    - name: "5.4.2.5 | Get root paths"
      ansible.builtin.shell: sudo -Hiu root env | grep '^PATH' | cut -d= -f2
      changed_when: false
      register: discovered_root_paths

    - name: "5.4.2.5 | Get root paths"
      when: discovered_root_paths is defined
      ansible.builtin.shell: sudo -Hiu root env | grep '^PATH' | cut -d= -f2 | tr ":" "\n"
      changed_when: false
      register: discovered_root_paths_split

    - name: "5.4.2.5 | Set fact"
      when: discovered_root_paths is defined
      ansible.builtin.set_fact:
        root_paths: "{{ discovered_root_paths.stdout }}"

    - name: "5.4.2.5 | Check for empty dirs"
      when: discovered_root_paths is defined
      ansible.builtin.shell: 'echo {{ root_paths }} | grep -q "::" && echo "roots path contains a empty directory (::)"'
      changed_when: false
      failed_when: discovered_root_path_empty_dir.rc not in [ 0, 1 ]
      register: discovered_root_path_empty_dir

    - name: "5.4.2.5 | Check for trailing ':'"
      when: discovered_root_paths is defined
      ansible.builtin.shell: '{{ root_paths }} | cut -d= -f2 | grep -q ":$" && echo "roots path contains a trailing (:)"'
      changed_when: false
      failed_when: discovered_root_path_trailing_colon.rc not in [ 0, 1 ]
      register: discovered_root_path_trailing_colon

    - name: "5.4.2.5 | Check for owner and permissions"
      when: discovered_root_paths is defined
      block:
        - name: "5.4.2.5 | Check for owner and permissions"
          ansible.builtin.stat:
            path: "{{ item }}"
          register: discovered_root_path_perms
          loop: "{{ discovered_root_paths_split.stdout_lines }}"

        - name: "5.4.2.5 | Set permissions"
          when:
            - item.stat.exists
            - item.stat.isdir
            - item.stat.pw_name != 'root' or item.stat.gr_name != 'root' or item.stat.woth or item.stat.wgrp
            - (item != 'root')
          ansible.builtin.file:
            path: "{{ item.stat.path }}"
            state: directory
            owner: root
            group: root
            mode: 'go-w'
            follow: false
          loop: "{{ discovered_root_path_perms.results }}"
          loop_control:
            label: "{{ item }}"

- name: "5.4.2.6 | PATCH | Ensure root user umask is configured"
  ansible.builtin.lineinfile:
    path: /root/.bash_profile
    regexp: \s*umask
    line: "umask {{ root_umask }}"
    create: true
    mode: 'u+x,go-rwx'

- name: "5.4.2.7 | PATCH | Ensure system accounts do not have a valid login shell"
  when:
    - "item.id not in prelim_interactive_usernames.stdout"
    - item.id not in system_users_shell
    - "'root' not in item.id"
    - disruption_high
  ansible.builtin.user:
    name: "{{ item.id }}"
    shell: /usr/sbin/nologin
  loop: "{{ passwd }}"
  loop_control:
    label: "{{ item.id }}"

- name: "5.4.2.8 | PATCH | Ensure accounts without a valid login shell are locked | Lock accounts"
  when:
    - disruption_high
    - "item.id not in prelim_interactive_usernames.stdout"
    - "'root' not in item.id"
  ansible.builtin.user:
    name: "{{ item.id }}"
    password_lock: true
  loop: "{{ passwd }}"
  loop_control:
    label: "{{ item.id }}"

- name: "5.4.3.1 | PATCH | Ensure nologin is not listed in /etc/shells"
  ansible.builtin.replace:
    path: /etc/shells
    regexp: nologin
    replace: ""

- name: "5.4.3.2 | PATCH | Ensure default user shell timeout is configured"
  ansible.builtin.blockinfile:
    path: "{{ item.path }}"
    state: "{{ item.state }}"
    marker: "# {mark} - CIS benchmark - Ansible-lockdown"
    create: true
    mode: 'go-wx'
    block: |
      TMOUT={{ shell_session_timeout }}
      readonly TMOUT
      export TMOUT
  loop:
    - { path: "{{ shell_session_file }}", state: present }
    - { path: /etc/profile, state: "{{ (shell_session_file == '/etc/profile') | ternary('present', 'absent') }}" }

- name: "5.4.3.3 | PATCH | Ensure default user umask is configured"
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: (?i)(umask\s+\d*)
    replace: '{{ item.line }} {{ bash_umask }}'
  loop:
    - { path: '/etc/profile', line: 'umask' }
    - { path: '/etc/login.defs', line: 'UMASK' }
