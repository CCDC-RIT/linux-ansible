---

- name: "5.3.1.1 | PATCH | Ensure latest version of pam is installed"
  when:
    - ansible_facts.packages['libpam-runtime'][0]['version'] is version('1.5.2-6', '<=') or
      "'libpam-runtime' not in ansible_facts.packages"
  ansible.builtin.package:
    name: libpam-runtime
    state: latest

- name: "5.3.1.2 | PATCH | Ensure libpam-modules is installed"
  when:
    - ansible_facts.packages['libpam-modules'][0]['version'] is version('1.5.2-6', '<=') or
      "'libpam-modules' not in ansible_facts.packages"
  ansible.builtin.package:
    name: libpam-modules
    state: latest

- name: "5.3.1.3 | PATCH | Ensure libpam-pwquality is installed"
  when:
    - "'libpam-pwquality' not in ansible_facts.packages"
  ansible.builtin.package:
    name: libpam-pwquality
    state: latest

- name: "5.3.2.1 | PATCH | Ensure pam_unix module is enabled"
  when:
    - disruption_high
    - pam_auth_unix
    - pam_create_pamunix_file
  ansible.builtin.template:
    src: 'usr/share/pam-configs/pam_unix.j2'
    dest: '/usr/share/pam-configs/pam_unix'
    owner: root
    group: root
    mode: 'go-rwx'
  notify: Pam_auth_update_pwunix

- name: "5.3.2.2 | PATCH | Ensure pam_faillock module is enabled"
  when:
    - disruption_high
    - pam_auth_faillock
    - pam_create_faillock_files
  ansible.builtin.template:
    src: 'usr/share/pam-configs/{{ item }}.j2'
    dest: '/usr/share/pam-configs/{{ item }}'
    owner: root
    group: root
    mode: 'go-rwx'
  loop:
    - faillock
    - faillock_notify
  notify:
    - Pam_auth_update_pwfaillock
    - Pam_auth_update_pwfaillock_notify

- name: "5.3.2.3 | PATCH | Ensure pam_pwquality module is enabled"
  when:
    - disruption_high
    - pam_create_pwquality_files
  ansible.builtin.template:
    src: 'usr/share/pam-configs/pwquality.j2'
    dest: '/usr/share/pam-configs/pwquality'
    owner: root
    group: root
    mode: 'go-rwx'
  notify: Pam_auth_update_pwquality

- name: "5.3.2.4 | PATCH | Ensure pam_pwhistory module is enabled"
  when:
    - disruption_high
    - pam_create_pwhistory_files
  ansible.builtin.template:
    src: 'usr/share/pam-configs/pwhistory.j2'
    dest: '/usr/share/pam-configs/pwhistory }}'
    owner: root
    group: root
    mode: 'go-rwx'
  notify: Pam_auth_update_pwhistory

- name: "5.3.3.1.1 | PATCH | Ensure password failed attempts lockout is configured"
  block:
    - name: "5.3.3.1.1 | configure faillock.conf"
      ansible.builtin.lineinfile:
        path: /etc/security/faillock.conf
        regexp: '^deny'
        line: 'deny = 3'
        insertafter: '^# end of pam-auth-update config'
        create: true
        owner: root
        group: root
        mode: 'go-wx'

    - name: "5.3.3.1.1 | discover pam config with deny"
      ansible.builtin.shell: grep -Pl -- '\bpam_faillock\.so\h+([^#\n\r]+\h+)?deny\b' /usr/share/pam-configs/*
      changed_when: false
      failed_when: discovered_faillock_deny_files.rc not in [ 0, 1 ]
      register: discovered_faillock_deny_files

    - name: "5.3.3.1.1 | if exists remove deny from faillock line in pam-auth conf files"
      when: discovered_faillock_deny_files.stdout | length > 0
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: '(*.pam_faillock.so\s*)deny\s*=\s*\d+\b(.*)'
        replace: \1\2
      with_fileglob:
        - '/usr/share/pam-configs/*'
        - '/etc/pam.d/*'

- name: "5.3.3.1.2 | PATCH | Ensure password unlock time is configured"
  block:
    - name: "5.3.3.1.2 | configure faillock.conf"
      ansible.builtin.lineinfile:
        path: /etc/security/faillock.conf
        regexp: '^unlock_time'
        line: 'unlock_time = 900'
        insertafter: '^# end of pam-auth-update config'
        create: true
        owner: root
        group: root
        mode: 'go-wx'

    - name: "5.3.3.1.2 | discover pam config with unlock_time"
      ansible.builtin.shell: grep -Pl -- '\bpam_faillock\.so\h+([^#\n\r]+\h+)?unlock_time\b' /usr/share/pam-configs/*
      register: discovered_faillock_unlock_files
      changed_when: false
      failed_when: discovered_faillock_unlock_files.rc not in [ 0, 1 ]

    - name: "5.3.3.1.2 | if exists remove unlock_time from faillock line in pam-auth conf files"
      when: discovered_faillock_unlock_files.stdout | length > 0
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: '(*.pam_faillock.so\s*)unlock_time\s*=\s*\b(.*)'
        replace: \1\2
      with_fileglob:
        - '/usr/share/pam-configs/*'
        - '/etc/pam.d/*'

- name: "5.3.3.1.3 | PATCH | Ensure password failed attempts lockout includes root account"
  block:
    - name: "5.3.3.1.3 | configure faillock.conf"
      ansible.builtin.lineinfile:
        path: /etc/security/faillock.conf
        regexp: '^even_deny_root'
        line: 'even_deny_root'
        insertafter: '^# end of pam-auth-update config'
        create: true
        owner: root
        group: root
        mode: 'go-wx'

    - name: "5.3.3.1.3 | discover pam config with unlock_time"
      ansible.builtin.shell: grep -Pl -- '\bpam_faillock\.so\h+([^#\n\r]+\h+)?(even_deny_root\b|root_unlock_time\s*=\s*\d+\b)' /usr/share/pam-configs/*
      changed_when: false
      failed_when: discovered_faillock_rootlock_files.rc not in [ 0, 1 ]
      register: discovered_faillock_rootlock_files

    - name: "5.3.3.1.3 | if exists remove unlock_time from faillock line in pam-auth conf files"
      when: discovered_faillock_rootlock_files.stdout | length > 0
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: '(*.pam_faillock.so\s*)(even_deny_root\b|root_unlock_time\s*=\s*\d+\b)(.*)'
        replace: \1\3
      with_fileglob:
        - '/usr/share/pam-configs/*'
        - '/etc/pam.d/*'

- name: "5.3.3.2.1 | PATCH | Ensure password number of changed characters is configured"
  block:
    - name: "5.3.3.2.1 | Remove difok from conf files except expected file"
      when:
        - item != 'etc/security/pwquality.conf.d/50-pwdifok.conf'
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: 'difok\s*=\s*\d+\b'
        replace: ''
      with_fileglob:
        - '/etc/security/pwquality.conf'
        - '/etc/security/pwquality.conf.d/*.conf'
        - '/etc/pam.d/common-password'

    - name: "5.3.3.2.1 | Ensure difok file exists"
      ansible.builtin.template:
        src: 'etc/security/pwquality.conf.d/50-pwdifok.conf.j2'
        dest: '/etc/security/pwquality.conf.d/50-pwdifok.conf'
        owner: root
        group: root
        mode: 'go-rwx'

- name: "5.3.3.2.2 | PATCH | Ensure minimum password length is configured"
  block:
    - name: "5.3.3.2.2 | Remove minlen from conf files except expected file"
      when:
        - item != 'etc/security/pwquality.conf.d/50-pwlength.conf'
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: 'minlen\s*=\s*\d+\b'
        replace: ''
      with_fileglob:
        - '/etc/security/pwquality.conf'
        - '/etc/security/pwquality.conf.d/*.conf'
        - '/etc/pam.d/common-password'

    - name: "5.3.3.2.2 | Ensure minlen file exists"
      ansible.builtin.template:
        src: 'etc/security/pwquality.conf.d/50-pwlength.conf.j2'
        dest: '/etc/security/pwquality.conf.d/50-pwlength.conf '
        owner: root
        group: root
        mode: 'go-rwx'

- name: "5.3.3.2.3 | PATCH | Ensure password complexity is configured"
  block:
    - name: "5.3.3.2.3 | Remove pwd complex settings from conf files except expected file"
      when:
        - item != 'etc/security/pwquality.conf.d/50-pwcomplexity.conf'
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: '(minclass|[dulo]credit)\s*=\s*(-\d|\d+)\b'
        replace: ''
      with_fileglob:
        - '/etc/security/pwquality.conf'
        - '/etc/security/pwquality.conf.d/*.conf'
        - '/etc/pam.d/common-password'

    - name: "5.3.3.2.3 | Ensure complexity file exists"
      ansible.builtin.template:
        src: 'etc/security/pwquality.conf.d/50-pwcomplexity.conf.j2'
        dest: '/etc/security/pwquality.conf.d/50-pwcomplexity.conf'
        owner: root
        group: root
        mode: 'go-rwx'

- name: "5.3.3.2.4 | PATCH | Ensure password same consecutive characters is configured"
  block:
    - name: "5.3.3.2.4 | Remove maxrepeat settings from conf files except expected file"
      when:
        - item != 'etc/security/pwquality.conf.d/50-pwrepeat.conf'
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: 'maxrepeat\s*=\s*\d+\b'
        replace: ''
      with_fileglob:
        - '/etc/security/pwquality.conf'
        - '/etc/security/pwquality.conf.d/*.conf'
        - '/etc/pam.d/common-password'

    - name: "5.3.3.2.4 | Ensure maxrepeat file exists"
      ansible.builtin.template:
        src: 'etc/security/pwquality.conf.d/50-pwrepeat.conf.j2'
        dest: '/etc/security/pwquality.conf.d/50-pwrepeat.conf'
        owner: root
        group: root
        mode: 'go-rwx'

- name: "5.3.3.2.5 | PATCH | Ensure password maximum sequential characters is configured"
  block:
    - name: "5.3.3.2.5 | Remove maxsequence settings from conf files except expected file"
      when:
        - item != 'etc/security/pwquality.conf.d/50-pwmaxsequence.conf'
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: 'maxsequence\s*=\s*\d+\b'
        replace: ''
      with_fileglob:
        - '/etc/security/pwquality.conf'
        - '/etc/security/pwquality.conf.d/*.conf'
        - '/etc/pam.d/common-password'

    - name: "5.3.3.2.5 | Ensure maxsequence file exists"
      ansible.builtin.template:
        src: 'etc/security/pwquality.conf.d/50-pwmaxsequence.conf.j2'
        dest: '/etc/security/pwquality.conf.d/50-pwmaxsequence.conf'
        owner: root
        group: root
        mode: 'go-rwx'

- name: "5.3.3.2.6 | PATCH | Ensure password dictionary check is enabled"
  block:
    - name: "5.3.3.2.6 | Remove dictcheck settings from conf files except expected file"
      when:
        - item != 'etc/security/pwquality.conf.d/50-pwdictcheck.conf'
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: 'dictcheck\s*=\s*\d+\b'
        replace: ''
      with_fileglob:
        - '/etc/security/pwquality.conf'
        - '/etc/security/pwquality.conf.d/*.conf'
        - '/etc/pam.d/common-password'

    - name: "5.3.3.2.6 | Ensure dictcheck file exists"
      ansible.builtin.template:
        src: 'etc/security/pwquality.conf.d/50-pwdictcheck.conf.j2'
        dest: '/etc/security/pwquality.conf.d/50-pwdictcheck.conf'
        owner: root
        group: root
        mode: 'go-rwx'

- name: "5.3.3.2.7 | PATCH | Ensure password quality checking is enforced"
  block:
    - name: "5.3.3.2.7 | Remove quality enforcement settings from conf files except expected file"
      when:
        - item != 'etc/security/pwquality.conf.d/50-pwquality_enforce.conf'
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: 'enforcing\s*=\s*\d+\b'
        replace: ''
      with_fileglob:
        - '/etc/security/pwquality.conf'
        - '/etc/security/pwquality.conf.d/*.conf'
        - '/etc/pam.d/common-password'

    - name: "5.3.3.2.7 | Ensure quality enforcement file exists"
      ansible.builtin.template:
        src: 'etc/security/pwquality.conf.d/50-pwquality_enforce.conf.j2'
        dest: '/etc/security/pwquality.conf.d/50-pwquality_enforce.conf'
        owner: root
        group: root
        mode: 'go-rwx'

- name: "5.3.3.2.8 | PATCH | Ensure password quality is enforced for the root user"
  ansible.builtin.template:
    src: 'etc/security/pwquality.conf.d/50-pwroot.conf.j2'
    dest: '/etc/security/pwquality.conf.d/50-pwroot.conf'
    owner: root
    group: root
    mode: 'go-rwx'

- name: "5.3.3.3.1 | PATCH | Ensure password history remember is configured"
  when:
    - disruption_high
  block:
    - name: "5.3.3.3.1 | Check existing files"
      ansible.builtin.shell: grep -Psi -- '^\h*password\h+[^#\n\r]+\h+pam_pwhistory\.so\h+([^#\n\r]+\h+)?remember=\d+\b' /etc/pam.d/common-password
      register: discovered_pwhistory_remember
      changed_when: false
      failed_when: discovered_pwhistory_remember.rc not in [0, 1]

    - name: "5.3.3.3.1 | Ensure remember is set"
      when: discovered_pwhistory_remember.stdout | length > 0
      ansible.builtin.lineinfile:
        path: '/usr/share/pam-configs/pwhistory'
        regexp: ^(password\s+[^#\n\r]+\s+pam_pwhistory\.so\s+)(.*)(remember=\d+)
        line: '\1\2\3 remember=24'
        backrefs: true
      notify: Pam_auth_update_pwhistory

- name: "5.3.3.3.2 | PATCH | Ensure password history is enforced for the root user"
  when:
    - disruption_high
  block:
    - name: "5.3.3.3.2 | Check existing files"
      ansible.builtin.shell: grep -Psi -- '^\h*password\h+[^#\n\r]+\h+pam_pwhistory\.so\h+([^#\n\r]+\h+)?enforce_for_root\b' /etc/pam.d/common-password
      register: discovered_pwhistory_remember
      changed_when: false
      failed_when: discovered_pwhistory_remember.rc not in [0, 1]

    - name: "5.3.3.3.2 | Ensure remember is set"
      when: discovered_pwhistory_remember.stdout | length > 0
      ansible.builtin.lineinfile:
        path: '/usr/share/pam-configs/pwhistory'
        regexp: ^(password\s+[^#\n\r]+\s+pam_pwhistory\.so\s+)(.*)(enforce_for_root)
        line: '\1\2\3 enforce_for_root'
        backrefs: true
      notify: Pam_auth_update_pwhistory

- name: "5.3.3.3.3 | PATCH | Ensure pam_pwhistory includes use_authtok"
  when:
    - disruption_high
  block:
    - name: "5.3.3.3.3 | Check existing files"
      ansible.builtin.shell: grep -Psi -- '^\h*password\h+[^#\n\r]+\h+pam_pwhistory\.so\h+([^#\n\r]+\h+)?use_authtok\b' /etc/pam.d/common-password
      register: discovered_pwhistory_use_authtok
      changed_when: false
      failed_when: discovered_pwhistory_use_authtok.rc not in [0, 1]

    - name: "5.3.3.3.3 | Ensure remember is set"
      when: discovered_pwhistory_use_authtok.stdout | length > 0
      ansible.builtin.lineinfile:
        path: '/usr/share/pam-configs/pwhistory'
        regexp: ^(password\s+[^#\n\r]+\s+pam_pwhistory\.so\s+)(.*)(use_authtok)
        line: '\1\2\3 use_authtok'
        backrefs: true
      notify: Pam_auth_update_pwhistory

- name: "5.3.3.4.1 | PATCH | Ensure pam_unix does not include nullok"
  when:
    - disruption_high
  block:
    - name: "5.3.3.4.1 | capture state"
      ansible.builtin.shell: grep -E "pam_unix.so.*nullok" /etc/pam.d/common-* /usr/share/pam-configs/* | cut -d ':' -f1 | uniq
      changed_when: false
      failed_when: discovered_pam_nullok.rc not in [ 0, 1 ]
      register: discovered_pam_nullok

    - name: "5.3.3.4.1 | Ensure nullok removed"
      when: discovered_pam_nullok.stdout | length > 0
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: nullok
        replace: ''
      loop: "{{ discovered_pam_nullok.stdout_lines }}"
      notify: Pam_auth_update_pwunix

- name: "5.3.3.4.2 | PATCH | Ensure pam_unix does not include remember"
  block:
    - name: "5.3.3.4.2 | capture state"
      ansible.builtin.shell: grep -PH -- '^\h*^\h*[^#\n\r]+\h+pam_unix\.so\b' /etc/pam.d/common-{password,auth,account,session,session-noninteractive} | grep -Pv -- '\bremember=\d\b'
      changed_when: false
      failed_when: discovered_pam_remember.rc not in [ 0, 1 ]
      register: discovered_pam_remember

    - name: "5.3.3.4.2 | Ensure remember removed"
      when: discovered_pam_remember.stdout | length > 0
      ansible.builtin.replace:
        path: "/usr/share/pam-configs/pam_unix"
        regexp: remember=\d+
        replace: ''
      notify: Pam_auth_update_pwunix

- name: "5.3.3.4.3 | PATCH | Ensure pam_unix includes a strong password hashing algorithm"
  block:
    - name: "5.3.3.4.3 | capture state"
      ansible.builtin.shell: grep -PH -- '^\h*password\h+([^#\n\r]+)\h+pam_unix\.so\h+([^#\n\r]+\h+)?(yescrypt)\b' /etc/pam.d/common-password
      changed_when: false
      failed_when: discovered_pam_pwhash.rc not in [ 0, 1 ]
      register: discovered_pam_pwhash

    - name: "5.3.3.4.3 | Ensure hash algorithm set"
      when: discovered_pam_remember.stdout | length > 0
      ansible.builtin.replace:
        path: "/usr/share/pam-configs/pam_unix"
        regexp: "(md5|bigcrypt|sha256|blowfish|gost_yescrypt|sha512|yescrypt)"
        replace: 'yescrypt'
      notify: Pam_auth_update_pwunix

- name: "5.3.3.4.4 | PATCH | Ensure pam_unix includes use_authtok"
  block:
    - name: "5.3.3.4.4 | capture state"
      ansible.builtin.shell: grep -PH -- '^\h*password\h+([^#\n\r]+)\h+pam_unix\.so\h+([^#\n\r]+\h+)?use_authtok\b' /etc/pam.d/common-password
      changed_when: false
      failed_when: discovered_pam_authtok.rc not in [ 0, 1 ]
      register: discovered_pam_authtok

    - name: "5.3.3.4.4 | pam_files"
      when:
        - discovered_pam_authtok is defined
        - discovered_pam_authtok | length > 0
      ansible.builtin.lineinfile:
        path: "/etc/pam.d/common-password"
        regexp: ^(\s*password\s+[success=end.*]\s+pam_unix\.so)(.*)\s+use_authtok\s*=\s*\S+(.*$)
        line: \1\2\3 use_authtok
        backrefs: true