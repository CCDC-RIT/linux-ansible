---

- name: "5.4.1.1 | PATCH | Ensure password expiration is configured"
  block:
    - name: "5.4.1.1 | Set /etc/login.defs PASS_MAX_DAYS"
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        regexp: '^PASS_MAX_DAYS|^#PASS_MAX_DAYS'
        line: 'PASS_MAX_DAYS 365'
        insertafter: '# Password aging controls'

    - name: "5.4.1.1 | Get existing users PASS_MAX_DAYS"
      ansible.builtin.shell: "awk -F: '(/^[^:]+:[^!*]/ && ($5>365 || $5<1 || $5 == -1)){print $1}' /etc/shadow"
      changed_when: false
      failed_when: false
      register: discovered_max_days

    - name: "5.4.1.1 | Set existing users PASS_MAX_DAYS"
      when:
        - disruption_high
        - (item != 'root')
      ansible.builtin.command: chage --maxdays 365 {{ item }}
      failed_when: false
      changed_when: discovered_max_days.stdout | length > 0
      loop: "{{ discovered_max_days.stdout_lines }}"

- name: "5.4.1.2 | PATCH | Ensure minimum password age is configured"
  block:
    - name: "5.4.1.2 | Set /etc/login.defs PASS_MIN_DAYS"
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        regexp: '^PASS_MIN_DAYS|^#PASS_MIN_DAYS'
        line: 'PASS_MIN_DAYS 1'

    - name: "5.4.1.2 | Get existing users PASS_MIN_DAYS"
      ansible.builtin.command: "awk -F: '(/^[^:]+:[^!*]/ && ($4<1)) {print $1}' /etc/shadow"
      changed_when: false
      failed_when: false
      register: discovered_passwd_min_days

    - name: "5.4.1.2 | Set existing users PASS_MIN_DAYS"
      when:
        - disruption_high
        - (item != 'root')
      ansible.builtin.command: chage --mindays 1 {{ item }}
      failed_when: false
      changed_when: discovered_passwd_min_days.stdout |length > 0
      loop: "{{ discovered_passwd_min_days.stdout_lines }}"

- name: "5.4.1.3 | PATCH | Ensure password expiration warning days is configured"
  block:
    - name: "5.4.1.3 | Set /etc/login.defs PASS_WARN_AGE"
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        regexp: '^PASS_WARN_AGE|^#PASS_WARN_AGE'
        line: 'PASS_WARN_AGE 7'

    - name: "5.4.1.3 | Get existing users PASS_WARN_AGE"
      ansible.builtin.shell: "awk -F: '(/^[^:]+:[^!*]/ && $6<7){print $1}' /etc/shadow"
      changed_when: false
      failed_when: false
      register: discovered_passwd_warn_days

    - name: "5.4.1.3 | Set existing users PASS_WARN_AGE"
      when:
        - disruption_high
        - (item != 'root')
      ansible.builtin.command: chage --maxdays 7 {{ item }}
      failed_when: false
      changed_when: discovered_passwd_warn_days.stdout | length > 0
      loop: "{{ discovered_passwd_warn_days.stdout_lines }}"

- name: "5.4.1.4 | PATCH | Ensure strong password hashing algorithm is configured"
  ansible.builtin.lineinfile:
    path: /etc/login.defs
    regexp: '^ENCRYPT_METHOD'
    line: 'ENCRYPT_METHOD YESCRYPT'

- name: "5.4.1.5 | PATCH | Ensure inactive password lock is configured"
  block:
    - name: "5.4.1.5 | General setting"
      ansible.builtin.shell: useradd -D | grep INACTIVE | cut -d= -f2
      changed_when: false
      failed_when: false
      register: discovered_passwd_inactive_setting

    - name: "5.4.1.5 | Set inactive period for new users"
      when: discovered_passwd_inactive_setting.stdout != 45 | string
      ansible.builtin.command: useradd -D -f 45
      failed_when: false
      changed_when: true

    - name: "5.4.1.5 | Get Individual users"
      ansible.builtin.shell: awk -F':' '(/^[^:]+:[^!*]/ && ($7~/(\\s*|-1)/ || ( $7>1 && $7<45))) {print $1}' /etc/shadow
      changed_when: false
      failed_when: false
      register: discovered_passwd_inactive_users

    - name: "5.4.1.5 | Set inactive period for existing users"
      when:
        - disruption_high
        - discovered_passwd_inactive_users.stdout | length > 0
        - (item != 'root')
      ansible.builtin.command: chage --inactive 45 {{ item }}
      failed_when: false
      changed_when: true
      with_items:
        - "{{ ubu22_passwd | map(attribute='id') | list | intersect(discovered_passwd_inactive_users.stdout_lines) | list }}"

- name: "5.4.1.6 | PATCH | Ensure all users last password change date is in the past"
  block:
    - name: "5.4.1.6 | Get current date in Unix Time"
      ansible.builtin.shell: echo $(($(date --utc --date "$1" +%s)/86400))
      changed_when: false
      failed_when: false
      check_mode: false
      register: discovered_current_time

    - name: "5.4.1.6 | Get list of users with last changed PW date in future"
      ansible.builtin.shell: "cat /etc/shadow | awk -F: '{if($3>{{ discovered_current_time.stdout }})print$1}'"
      changed_when: false
      failed_when: false
      check_mode: false
      register: discovered_passwd_future_user_list

    - name: "5.4.1.6 | Warn about users"
      when: discovered_passwd_future_user_list.stdout | length > 0
      ansible.builtin.debug:
        msg:
          - "WARNING!! The following accounts have the last PW change date in the future"
          - "{{ discovered_passwd_future_user_list.stdout_lines }}"

    - name: "5.4.1.6 | warn_count"
      when: discovered_passwd_future_user_list.stdout | length > 0
      ansible.builtin.import_tasks:
        file: warning_facts.yml

    - name: "5.4.1.6 | Lock accounts with future PW changed dates"
      when:
        - ubtu22cis_disruption_high
        - discovered_passwd_future_user_list.stdout | length > 0
      ansible.builtin.command: passwd --expire {{ item }}
      failed_when: false
      changed_when: true
      with_items:
        - "{{ discovered_passwd_future_user_list.stdout_lines }}"

- name: "5.4.2.1 | PATCH | Ensure root is the only UID 0 account"
  when:
    - prelim_uid_zero_accounts_except_root.rc
    - disruption_high
  ansible.builtin.command: passwd -l {{ item }}
  changed_when: false
  failed_when: false
  loop: "{{ prelim_uid_zero_accounts_except_root.stdout_lines }}"

- name: "5.4.2.2 | PATCH | Ensure root is the only GID 0 account"
  when:
    - disruption_high
  block:
    - name: "5.4.2.2 | Get members of gid 0"
      ansible.builtin.shell: "awk -F: '($1 !~ /^(sync|shutdown|halt|operator)/ && $4==\"0\") {print $1}' /etc/passwd | grep -wv 'root'"
      changed_when: false
      failed_when: discovered_gid0_members.rc not in [ 0, 1 ]
      register: discovered_gid0_members

    - name: "5.4.2.2 | Remove users not root from gid 0"
      when:
        - discovered_gid0_members is defined
        - discovered_gid0_members.stdout | length > 0
      ansible.builtin.user:
        name: "{{ item }}"
        group: root
        state: absent
      loop: "{{ discovered_gid0_members.stdout_lines }}"

- name: "5.4.2.3 | AUDIT | Ensure group root is the only GID 0 group"
  block:
    - name: "5.4.2.3 | Get groups with gid 0"
      ansible.builtin.shell: "awk -F: '$3==\"0\"{print $1}' /etc/group | grep -vw 'root'"
      changed_when: false
      failed_when: discovered_gid0_groups.rc not in [ 0, 1 ]
      register: discovered_gid0_groups

    - name: "5.4.2.3 | Warning if others gid 0 groups"
      when:
        - discovered_gid0_groups is defined
        - discovered_gid0_groups.stdout | length > 0
      ansible.builtin.debug:
        msg:
          - "Warning!! You have other groups assigned to GID 0 - Please resolve"
          - "{{ discovered_gid0_groups.stdout_lines }}"

- name: "5.4.2.4 | PATCH | Ensure root password is set"
  ansible.builtin.debug:
    msg: "This is set as an assert in tasks/main"

- name: "5.4.2.5 | PATCH | Ensure root PATH Integrity"
  block:
    - name: "5.4.2.5 | Get root paths"
      ansible.builtin.shell: sudo -Hiu root env | grep '^PATH' | cut -d= -f2
      changed_when: false
      register: discovered_root_paths

    - name: "5.4.2.5 | Get root paths"
      when: discovered_root_paths is defined
      ansible.builtin.shell: sudo -Hiu root env | grep '^PATH' | cut -d= -f2 | tr ":" "\n"
      changed_when: false
      register: discovered_root_paths_split

    - name: "5.4.2.5 | Set fact"
      when: discovered_root_paths is defined
      ansible.builtin.set_fact:
        root_paths: "{{ discovered_root_paths.stdout }}"

    - name: "5.4.2.5 | Check for empty dirs"
      when: discovered_root_paths is defined
      ansible.builtin.shell: 'echo {{ root_paths }} | grep -q "::" && echo "roots path contains a empty directory (::)"'
      changed_when: false
      failed_when: discovered_root_path_empty_dir.rc not in [ 0, 1 ]
      register: discovered_root_path_empty_dir

    - name: "5.4.2.5 | Check for trailing ':'"
      when: discovered_root_paths is defined
      ansible.builtin.shell: '{{ root_paths }} | cut -d= -f2 | grep -q ":$" && echo "roots path contains a trailing (:)"'
      changed_when: false
      failed_when: discovered_root_path_trailing_colon.rc not in [ 0, 1 ]
      register: discovered_root_path_trailing_colon

    - name: "5.4.2.5 | AUDIT | Ensure root PATH Integrity | Check for owner and permissions"
      when: discovered_root_paths is defined
      block:
        - name: "5.4.2.5 | Check for owner and permissions"
          ansible.builtin.stat:
            path: "{{ item }}"
          register: discovered_root_path_perms
          loop: "{{ discovered_root_paths_split.stdout_lines }}"

        - name: "5.4.2.5 | Set permissions"
          when:
            - item.stat.exists
            - item.stat.isdir
            - item.stat.pw_name != 'root' or item.stat.gr_name != 'root' or item.stat.woth or item.stat.wgrp
            - (item != 'root')
          ansible.builtin.file:
            path: "{{ item.stat.path }}"
            state: directory
            owner: root
            group: root
            mode: 'go-w'
            follow: false
          loop: "{{ discovered_root_path_perms.results }}"
          loop_control:
            label: "{{ item }}"

- name: "5.4.2.6 | PATCH | Ensure root user umask is configured"
  ansible.builtin.lineinfile:
    path: /root/.bash_profile
    regexp: \s*umask
    line: "umask 0027"
    create: true
    owner: root
    group: root
    mode: 'g-wx,o-rwx'

- name: "5.4.2.7 | PATCH | Ensure system accounts do not have a valid login shell"
  when:
    - "item.id not in prelim_interactive_usernames.stdout"
    - "'root' not in item.id"
    - disruption_high
  ansible.builtin.user:
    name: "{{ item.id }}"
    shell: /usr/sbin/nologin
  loop: "{{ ubu22_passwd }}"
  loop_control:
    label: "{{ item.id }}"

- name: "5.4.2.8 | PATCH | Ensure accounts without a valid login shell are locked | Lock accounts"
  when:
    - disruption_high
    - "item.id not in prelim_interactive_usernames.stdout"
    - "'root' not in item.id"
  ansible.builtin.user:
    name: "{{ item.id }}"
    password_lock: true
  loop: "{{ ubu22_passwd }}"
  loop_control:
    label: "{{ item.id }}"

- name: "5.4.3.1 | PATCH | Ensure nologin is not listed in /etc/shells"
  ansible.builtin.replace:
    path: /etc/shells
    regexp: nologin
    replace: ""

- name: "5.4.3.2 | PATCH | Ensure default user shell timeout is configured"
  ansible.builtin.blockinfile:
    path: "{{ item.path }}"
    state: "{{ item.state }}"
    marker: "# {mark} - CIS benchmark - Ansible-lockdown"
    create: true
    mode: 'u-x,go-wx'
    block: |
      TMOUT=900
      readonly TMOUT
      export TMOUT
  loop:
    - { path: /etc/profile.d/tmout.sh, state: present }
    - { path: /etc/profile, state: "{{ ('/etc/profile.d/tmout.sh' == '/etc/profile') | ternary('present', 'absent') }}" }

- name: "5.4.3.3 | PATCH | Ensure default user umask is configured"
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: (?i)(umask\s+\d\d\d)
    replace: '{{ item.line }} 027'
  loop:
    - { path: '/etc/profile', line: 'umask' }
    - { path: '/etc/login.defs', line: 'UMASK' }