#call each sections main here
#have this get executed by the main playbook

#reinstall core services (pam, ssh, etc.)

- name: Gather ansible facts
  ansible.builtin.package_facts:

- name: Check OS version and family
  ansible.builtin.fail:
    msg: "This role can only be run against Ubuntu 22. {{ ansible_facts.distribution }} {{ ansible_facts.distribution_major_version }} is not supported."
  when: ansible_facts.distribution != 'Ubuntu'

# we need to set something up a register earlier in our playbook that this can read to know if it is a kube node or a container
- name: Setup rules if container
  block:
    - name: Discover and set container variable if required
      ansible.builtin.set_fact:
        system_is_container: true

    - name: Load variable for container
      ansible.builtin.include_vars:
        file: "{{ container_vars_file }}"

    - name: Output if discovered is a container
      when: system_is_container
      ansible.builtin.debug:
        msg: system has been discovered as a container
  when: is_target_container

- name: "CIS Benchmark | prelims"
  ansible.builtin.import_tasks:
    file: prelim.yml

- name: "CIS Benchmark | section 1"
  ansible.builtin.import_tasks:
    file: cis_sections/section_1/main.yml
  when: section_1

- name: "CIS Benchmark | section 3"
  ansible.builtin.import_tasks:
    file: cis_sections/section_3/main.yml
  when: section_3

- name: "CIS Benchmark | section 5"
  ansible.builtin.import_tasks:
    file: cis_sections/section_5/main.yml
  when: section_5

- name: "CIS Benchmark | section 6"
  ansible.builtin.import_tasks:
    file: cis_sections/section_6/main.yml
  when: section_6

- name: "CIS Benchmark | section 7"
  ansible.builtin.import_tasks:
    file: cis_sections/section_7/main.yml
  when: section_7

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: ClamAV
  ansible.builtin.import_tasks: 
    file: clamav.yml

- name: SSH
  ansible.builtin.import_tasks:
    file: ssh.yml

- name: Update_Initramfs
  ansible.builtin.command: update-initramfs -u
  changed_when: true
  ignore_errors: yes

- name: Grub update
  ansible.builtin.command: update-grub
  changed_when: true
  failed_when: false
  ignore_errors: yes

- name: Reload systemctl
  ansible.builtin.systemd:
    daemon_reload: true
  ignore_errors: yes

- name: Update dconf
  ansible.builtin.command: dconf update
  changed_when: true
  failed_when: false
  ignore_errors: yes

- name: Restart postfix
  ansible.builtin.service:
    name: postfix
    state: restarted
  ignore_errors: yes

- name: Restart journald
  ansible.builtin.systemd:
    name: systemd-journald
    state: restarted
  ignore_errors: yes

- name: Restart exim4
  ansible.builtin.systemd:
    name: exim4
    state: restarted
  ignore_errors: yes

- name: Restart firewalld
  ansible.builtin.systemd:
    name: firewalld.service
    state: restarted
  ignore_errors: yes

- name: Restart fail2ban
  ansible.builtin.systemd:
    name: fail2ban.service
    state: restarted
  ignore_errors: yes

- name: Restart sshd
  ansible.builtin.systemd:
    name: sshd.service
    state: restarted
  ignore_errors: yes

- name: Restart clamav-daemon
  ansible.builtin.systemd:
    name: clamav-daemon.service
    state: restarted
  ignore_errors: yes

- name: Restart auditd
  ansible.builtin.command: service auditd restart  # noqa command-instead-of-module
  changed_when: true
  when: discovered_audit_rules_updated is defined
  ignore_errors: yes

- name: Reload ufw
  community.general.ufw:
    state: reloaded
  ignore_errors: yes

- name: Pam_auth_update_pwunix
  ansible.builtin.command: pam-auth-update --enable pam_unix
  changed_when: true
  ignore_errors: yes

- name: Pam_auth_update_pwfaillock
  ansible.builtin.command: pam-auth-update --enable faillock
  changed_when: true
  ignore_errors: yes

- name: Pam_auth_update_pwfaillock_notify
  ansible.builtin.command: pam-auth-update --enable faillock_notify
  changed_when: true
  ignore_errors: yes

- name: Pam_auth_update_pwquality
  ansible.builtin.command: pam-auth-update --enable pwquality
  changed_when: true
  ignore_errors: yes

- name: Pam_auth_update_pwhistory
  ansible.builtin.command: pam-auth-update --enable pwhistory
  changed_when: true
  ignore_errors: yes

- name: Flush ipv4 route table
  ansible.posix.sysctl:
    name: net.ipv4.route.flush
    value: '1'
    sysctl_set: true
  when: ansible_facts.virtualization_type != "docker"
  ignore_errors: yes

- name: Flush ipv6 route table
  ansible.posix.sysctl:
    name: net.ipv6.route.flush
    value: '1'
    sysctl_set: true
  when:
    - ansible_facts.virtualization_type != "docker"
    - ipv6_required
  ignore_errors: yes

- name: Set_reboot_required
  ansible.builtin.set_fact:
    change_requires_reboot: true
  ignore_errors: yes

- name: Warn to Reboot system
  ansible.builtin.debug:
    msg: "Warning!! changes have been made that require a reboot to be implemented but skip reboot was set - Can affect compliance check results"
  changed_when: true
  when:
  - change_requires_reboot