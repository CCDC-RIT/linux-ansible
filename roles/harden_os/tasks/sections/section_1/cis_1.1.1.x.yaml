---

- name: "1.1.1.1 | Mounting of cramfs filesystem is diabled"
  block:
    - name: "Edit modprobe config"
      ansible.builtin.lineinfile:
        dest: "{{ modprobe_path }}"
        regexp: '^(#)?install cramfs(\\s|$)'
        line: "install cramfs /bin/true"
        create: true
        ignore_erros: true

    - name: "Ensure cramfs is blacklisted"
      ansible.builtin.lineinfile:
        path: "{{ blacklist_path }}"
        regexp: "^(#)?blacklist cramfs(\\s|$)"
        line: "blacklist cramfs"
        create: true
        mode: '0600'
        ignore_erros: 
            
    - name: "Disable cramfs module"
      block:
        - name: "Disable cramfs module for Linux"
          community.general.modprobe:
            name: cramfs
            state: absent
          when: ansible_facts['os_family'] != 'BSD'
        
        - name: "Disable cramfs module for BSD"
          ansible.builtin.lineinfile:
            path: /boot/loader.conf
            regexpr: "^(#)?cramfs_load(\\s|$)"
            line: 'cramfs_load=NO'
            create: true
          when: ansible_facts['os_family'] == 'BSD'
      when: ansible_connection != 'docker'

  vars:
    modprobe_path: >
      {{ '/etc/modprobe.d/cramfs.conf' if ansible_facts['os_family'] == 'Debian'
          else '/usr/local/etc/mobprobe.d/cramfs.conf' if ansible_facts['os_family'] == 'BSD'
          else '/etc/modprobe.d/cramfs.conf' }}
    blacklist_path: >
      {{ '/etc/modprobe.d/blacklist.conf' if ansible_facts['os_family'] == 'Debian'
          else '/usr/local/etc/modprobe.d/cramfs.conf' if ansible_facts['os_family'] == 'BSD'
          else '/etc/modprobe.d/blacklist.conf' }}
        
  when:
    - ansible_facts['os_family'] in ['Debian', 'RedHat', 'BSD', 'Suse']

- name: "1.1.1.2 | Mounting of sqashfs filesystem is disabled"
  block:
    - name: "edit modprobe config"
      ansible.builtin.lineinfile:
        dest: "{{ modprobe_path }}"
        regexp: '^(#)?install squashfs(\\s|$)'
        line: "install squashfs /bin/true"
        create: true

    - name: "Ensure squashfs is blacklisted"
      ansible.builtin.lineinfile:
        path: "{{ blacklist_path }}"
        regexpr: "^(#)?blacklist squashfs(\\s|$)"
        line: "blacklist squashfs"
        create: true
      
    - name: "Disable squashfs module"
      block: 
        - name: "Disable squashfs module for Linux"
          community.general.modprobe:
            name: squashfs
            state: absent
          when: ansible_fact['os_family'] != 'BSD'

        - name: "Disable squashfs module for BSD"
          ansible.builtin.lineinfile:
            path: /boot/loader.conf
            regexp: "^(#)?squashfs_load(\\s|$)"
            line: "squashfs_load=\"NO\""
            create: true
          when: ansible_fact['os_family'] == 'BSD'
  vars:
    modprobe_path: >
      {{ '/etc/modprobe.d/squashfs.conf' if ansible_facts['os_family'] != 'BSD'
         else '/usr/local/etc/modprobe.d/squashfs.conf' }}
    blacklist_path: >
      {{  '/etc/modprobe.d/blacklist.conf' if ansible_facts['os_family'] != 'BSD'
         else '/usr/local/etc/modprobe.d/blacklist.conf' }}
  
  when:
    - ansible_facts['os_family'] in ['Debian', 'RedHat', 'BSD', 'Suse']
    - ansible_connection != 'docker'

- name: "1.1.1.3 | Mounting of udf filesystem is disabled"
  block:
    - name: "edit modprobe config"
      ansible.builtin.lineinfile:
        dest: "{{ modprobe_path }}"
        regexp: '^(#)?install udf(\\s|$)'
        line: "install udf /bin/true"
        create: true

    - name: "Ensure udf is blacklisted"
      ansible.builtin.lineinfile:
        path: "{{ blacklist_path }}"
        regexpr: "^(#)?blacklist udf(\\s|$)"
        line: "blacklist udf"
        create: true
      
    - name: "Disable udf module"
      block: 
        - name: "Disable udf module for Linux"
          community.general.modprobe:
            name: udf
            state: absent
          when: ansible_fact['os_family'] != 'BSD'

        - name: "Disable udf module for BSD"
          ansible.builtin.lineinfile:
            path: /boot/loader.conf
            regexp: "^(#)?udf_load(\\s|$)"
            line: "udf_load=\"NO\""
            create: true
          when: ansible_fact['os_family'] == 'BSD'
  vars:
    modprobe_path: >
      {{ '/etc/modprobe.d/udf.conf' if ansible_facts['os_family'] != 'BSD'
         else '/usr/local/etc/modprobe.d/udf.conf' }}
    blacklist_path: >
      {{  '/etc/modprobe.d/blacklist.conf' if ansible_facts['os_family'] != 'BSD'
         else '/usr/local/etc/modprobe.d/blacklist.conf' }}
  
  when:
    - ansible_facts['os_family'] in ['Debian', 'RedHat', 'BSD', 'Suse']
    - ansible_connection != 'docker'