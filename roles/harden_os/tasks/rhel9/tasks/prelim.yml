---

# for 1.5
- name: "PRELIM | AUDIT | Check systemd coredump"
  ansible.builtin.stat:
    path: /etc/systemd/coredump.conf
  register: prelim_systemd_coredump

# for 1.6
- name: "PRELIM | PATCH | Setup crypto-policy"
  block:
    - name: "PRELIM | PATCH | Install crypto-policies | pkgs present"
      ansible.builtin.package:
        name:
          - crypto-policies
          - crypto-policies-scripts
        state: present

    - name: "PRELIM | AUDIT | Gather system-wide crypto-policy"
      ansible.builtin.command: 'update-crypto-policies --show'
      changed_when: false
      check_mode: false
      register: prelim_system_wide_crypto_policy

    - name: "PRELIM | AUDIT | Gather system-wide crypto-policy | set fact system policy"
      ansible.builtin.set_fact:
        current_crypto_policy: "{{ prelim_system_wide_crypto_policy.stdout.split(':')[0] }}"

    - name: "PRELIM | AUDIT | Gather system-wide crypto-policy module | set fact system policy submodule"
      when: "':' in prelim_system_wide_crypto_policy.stdout"
      ansible.builtin.set_fact:
        current_crypto_module: "{{ prelim_system_wide_crypto_policy.stdout.split(':')[1] }}"
  when:
    - rule_1_6_1

# for 3.1
- name: "PRELIM | AUDIT | Wireless adapter pre-requisites"
  block:
    - name: "PRELIM | AUDIT | Discover is wirelss adapter on system"
      ansible.builtin.command: find /sys/class/net/*/ -type d -name wireless
      register: discover_wireless_adapters
      changed_when: false
      failed_when: discover_wireless_adapters.rc not in [ 0, 1 ]

    - name: "PRELIM | PATCH | Install Network-Manager | if wireless adapter present"
      ansible.builtin.package:
        name: NetworkManager
        state: present
      when:
        - discover_wireless_adapters.rc == 0
        - "'NetworkManager' not in ansible_facts.packages"
  when:
    - not system_is_container

# for 5.4
- name: "PRELIM | AUDIT | Gather UID 0 accounts other than root"
  ansible.builtin.shell: "cat /etc/passwd | awk -F: '($3 == 0 && $1 != \"root\") {i++;print $1 } END {exit i}'"
  changed_when: false
  check_mode: false
  register: prelim_uid_zero_accounts_except_root

# for 5.4
- name: "PRELIM | AUDIT | Interactive Users"
  ansible.builtin.shell: >
    grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '(!index($7, "sbin/nologin") && $7 != "/bin/nologin" && $7 != "/bin/false" && $7 != "/dev/null") { print $1 }'
  changed_when: false
  register: prelim_interactive_usernames

# for 5.4
- name: "Check authselect profile is selected"
  block:
    - name: "Check authselect profile name has been updated | Ensure name from default is changed"
      ansible.builtin.assert:
        that: authselect_custom_profile_name != 'cis_example_profile'
        fail_msg: "You still have the default name for your authselect profile"

    - name: "Check authselect profile is selected | Check current profile"
      ansible.builtin.shell: authselect current | head -1 | awk '{print $NF}'
      changed_when: false
      failed_when: prelim_authselect_current_profile.rc not in [ 0, 1 ]
      register: prelim_authselect_current_profile

    - name: "Check authselect profile is selected | Ensure profile name is set"
      ansible.builtin.assert:
        that: prelim_authselect_current_profile is defined
        success_msg: "Authselect is running and profile is selected"
        fail_msg: Authselect updates have been selected there are issues with profile selection"
  when: allow_authselect_updates

# for 5.4 and 7.2
- name: "PRELIM | 5.5.2 | 6.2.7 | 6.2.8 | 6.2.20 | Parse /etc/passwd"
  block:
    - name: "PRELIM | 5.5.2 | 6.2.7 | 6.2.8 | 6.2.20 | Parse /etc/passwd"
      ansible.builtin.command: cat /etc/passwd
      changed_when: false
      check_mode: false
      register: prelim_passwd_file_audit

    - name: "PRELIM | 5.5.2 | 6.2.7 | 6.2.8 | 6.2.20 | Split passwd entries"
      ansible.builtin.set_fact:
        passwd: "{{ prelim_passwd_file_audit.stdout_lines | map('regex_replace', ld_passwd_regex, ld_passwd_yaml) | map('from_yaml') | list }}"
      loop: "{{ prelim_passwd_file_audit.stdout_lines }}"
      vars:
        ld_passwd_regex: >-
          ^(?P<id>[^:]*):(?P<password>[^:]*):(?P<uid>[^:]*):(?P<gid>[^:]*):(?P<gecos>[^:]*):(?P<dir>[^:]*):(?P<shell>[^:]*)
        ld_passwd_yaml: |  # pragma: allowlist secret
          id: >-4
              \g<id>
          password: >-4
              \g<password>
          uid: \g<uid>
          gid: \g<gid>
          gecos: >-4
              \g<gecos>
          dir: >-4
              \g<dir>
          shell: >-4
              \g<shell>

# for 6.3
- name: "PRELIM | AUDIT | Discover audit logfile"
  ansible.builtin.shell: grep ^log_file /etc/audit/auditd.conf | awk '{ print $NF }'
  changed_when: false
  register: prelim_auditd_logfile
  when:
    - rule_6_3_4_1 or
      rule_6_3_4_2 or
      rule_6_3_4_3 or
      rule_6_3_4_4

# for 6.3
- name: "PRELIM | AUDIT | Audit conf and rules files | list files"
  ansible.builtin.find:
    path: /etc/audit
    file_type: file
    recurse: true
    patterns: '*.conf,*.rules'
  register: prelim_auditd_conf_files
  when:
    - rule_6_3_4_5 or
      rule_6_3_4_6 or
      rule_6_3_4_7

# for 7.2
- name: "PRELIM | AUDIT | Interactive User accounts home directories"
  tags: always
  ansible.builtin.shell: >
    grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '(!index($7, "sbin/nologin") && $7 != "/bin/nologin" && $7 != "/bin/false") { print $6 }'
  changed_when: false
  register: prelim_interactive_users_home

# for 7.2
- name: "PRELIM | AUDIT | Discover Interactive UID MIN and MIN from logins.def"
  tags: always
  block:
    - name: "PRELIM | AUDIT | Capture UID_MIN information from logins.def"
      ansible.builtin.shell: grep -w "^UID_MIN" /etc/login.defs | awk '{print $NF}'
      changed_when: false
      register: prelim_uid_min_id

    - name: "PRELIM | AUDIT | Capture UID_MAX information from logins.def"
      ansible.builtin.shell: grep -w "^UID_MAX" /etc/login.defs | awk '{print $NF}'
      changed_when: false
      register: prelim_uid_max_id

    - name: "PRELIM | AUDIT | set_facts for interactive uid/gid"
      ansible.builtin.set_fact:
        prelim_min_int_uid: "{{ prelim_uid_min_id.stdout }}"
        prelim_max_int_uid: "{{ prelim_uid_max_id.stdout }}"
  when: discover_int_uid

