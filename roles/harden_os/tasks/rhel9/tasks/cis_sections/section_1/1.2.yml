---

- name: "1.2.1.1 | AUDIT | Ensure GPG keys are configured"
  block:
    - name: "1.2.1.1 | List installed pubkey keys"
      ansible.builtin.shell: "rpm -qa | grep {{ os_gpg_key_pubkey_name }}"  # noqa command-instead-of-module
      changed_when: false
      failed_when: false
      register: discovered_os_installed_pub_keys

    - name: "1.2.1.1 | Query found keys"
      ansible.builtin.shell: |
        'rpm -q --queryformat "%{PACKAGER} %{VERSION}\\n" {{ os_gpg_key_pubkey_name }} | grep "{{ os_gpg_key_pubkey_content }}"'
      changed_when: false
      failed_when: false
      register: discovered_os_gpg_key_check

    - name: "1.2.1.1 | If expected keys fail"
      ansible.builtin.fail:
        msg: Installed GPG Keys do not meet expected values or expected keys are not installed
      when:
        - discovered_os_installed_pub_keys.rc == 1 or
          discovered_os_gpg_key_check.rc == 1
  when:
    - rule_1_2_1_1
    - ansible_facts.distribution == "RedHat" or
      ansible_facts.distribution == "Rocky" or
      ansible_facts.distribution == "AlmaLinux"

- name: "1.2.1.2 | PATCH | Ensure gpgcheck is globally activated"
  block:
    - name: "1.2.1.2 | Find repos"
      ansible.builtin.find:
        paths: /etc/yum.repos.d
        patterns: "*.repo"
      register: discovered_yum_repos

    - name: "1.2.1.2 | Update yum.repos"
      ansible.builtin.replace:
        name: "{{ item.path }}"
        regexp: ^gpgcheck\s*=\s*0
        replace: "gpgcheck=1"
      loop: "{{ discovered_yum_repos.files }}"
      loop_control:
        label: "{{ item.path }}"
  when: rule_1_2_1_2

- name: "1.2.1.3 | AUDIT | Ensure repo_gpgcheck is globally activated"
  block:
    - name: "1.2.1.3 | dnf.conf"
      ansible.builtin.lineinfile:
        path: /etc/dnf/dnf.conf
        regexp: '^repo_gpgcheck'
        line: repo_gpgcheck=1

    - name: "1.2.1.3 | get repo files"
      ansible.builtin.find:
        paths: /etc/yum.repos.d
        patterns: "*.repo"
      register: discovered_repo_files

    - name: "1.2.1.3 | amend repo files"
      ansible.builtin.replace:
        path: "{{ item.path }}"
        regexp: ^repo_gpgcheck\s*=s*0
        replace: repo_gpgcheck=1
      loop: "{{ discovered_repo_files.files }}"
      loop_control:
        label: "{{ item.path }}"
  when:
    - rule_1_2_1_3
    - rule_enable_repogpg
    - not rhel_default_repo

- name: "1.2.1.4 | AUDIT | Ensure package manager repositories are configured"
  block:
    - name: "1.2.1.4 | Get repo list"
      ansible.builtin.command: dnf repolist
      changed_when: false
      failed_when: false
      check_mode: false
      register: discovered_dnf_configured

    - name: "1.2.1.4 | Display repo list"
      ansible.builtin.debug:
        msg:
          - "Warning!! Below are the configured repos. Please review and make sure all align with site policy"
          - "{{ discovered_dnf_configured.stdout_lines }}"
  when: rule_1_2_1_4

- name: "1.2.2.1 | PATCH | Ensure updates, patches, and additional security software are installed"
  ansible.builtin.package:
    name: "*"
    state: latest
  when:
    - rule_1_2_2_1
    - not system_is_ec2