---
- name: Verify NGINX package installed
  ansible.builtin.package:
    name: nginx
    state: present

- name: Create backup directory
  ansible.builtin.file:
    path: "{{ backup_dir }}"
    state: directory
    mode: 0755

- name: Check if HTTP context is present
  ansible.builtin.lineinfile:
    dest: "/etc/nginx/nginx.conf"
    line: '^http\s*{'
    state: present
  check_mode: yes
  register: http_context
  failed_when: http_context is failed

- name: Backup NGINX config file remotely to the ansible controller
  ansible.builtin.fetch:
    src: "/etc/nginx/nginx.conf"
    dest: "/opt/inventory"

- name: Backup NGINX config file on to webserver
  ansible.builtin.copy:
    src: "/etc/nginx/nginx.conf"
    dest: "{{ backup_dir }}"
    remote_src: true

- name: Disable server tokens
  ansible.builtin.lineinfile:
    dest: "/etc/nginx/nginx.conf"
    regexp: ^\s*server_tokens
    line: "   server_tokens off;"
    insertafter: 'http\s*{'
    mode: '0640'
    owner: "root"
    group: "root"
  when: http_context is not failed
  notify: Restart NGINX

- name: Lower client body buffer size
  ansible.builtin.lineinfile:
    dest: "/etc/nginx/nginx.conf"
    regexp: ^\s*client_body_buffer_size
    line: "   client_body_buffer_size 1k;"
    insertafter: 'http\s*{'
    mode: '0640'
    owner: "root"
    group: "root"
  when: http_context is not failed
  notify: Restart NGINX

- name: Lower client header buffer size
  ansible.builtin.lineinfile:
    dest: "/etc/nginx/nginx.conf"
    regexp: ^\s*client_header_buffer_size
    line: "   client_header_buffer_size 1k;"
    insertafter: 'http\s*{'
    mode: '0640'
    owner: "root"
    group: "root"
  when: http_context is not failed
  notify: Restart NGINX

- name: Lower client max body size
  ansible.builtin.lineinfile:
    dest: "/etc/nginx/nginx.conf"
    regexp: ^\s*client_max_body_size
    line: "   client_max_body_size 1k;"
    insertafter: 'http\s*{'
    mode: '0640'
    owner: "root"
    group: "root"
  when: http_context is not failed
  notify: Restart NGINX

- name: Lower large client header buffers
  ansible.builtin.lineinfile:
    dest: "/etc/nginx/nginx.conf"
    regexp: ^\s*large_client_header_buffers
    line: "   large_client_header_buffers 2 1k;"
    insertafter: 'http\s*{'
    mode: '0640'
    owner: "root"
    group: "root"
  when: http_context is not failed
  notify: Restart NGINX

- name: Prevent clickjacking attacks
  ansible.builtin.lineinfile:
    dest: "/etc/nginx/nginx.conf"
    regexp: '^\s*add_header X-Frame-Options'
    line: "   add_header X-Frame-Options \"SAMEORIGIN\";"
    insertafter: 'http\s*{'
    mode: '0640'
    owner: "root"
    group: "root"
  when: http_context is not failed
  notify: Restart NGINX

- name: Enable XXS Filter
  ansible.builtin.lineinfile:
    dest: "/etc/nginx/nginx.conf"
    regexp: '^\s*add_header X-XSS-Protection'
    line: "   add_header X-XSS-Protection \"1; mode=block\";"
    insertafter: 'http\s*{'
    mode: '0640'
    owner: "root"
    group: "root"
  when: http_context is not failed
  notify: Restart NGINX

- name: Prevent XSS and other Data Injection
  ansible.builtin.lineinfile:
    dest: "/etc/nginx/nginx.conf"
    regexp: '^\s*add_header Content-Security-Policy'
    line: "   add_header X-Frame-Options \"default-src 'self' http: data: blob: 'unsafe-inline'\" always;"
    insertafter: 'http\s*{'
    mode: '0640'
    owner: "root"
    group: "root"
  when: http_context is not failed
  notify: Restart NGINX

- name: Force secure SSL protocols
  ansible.builtin.lineinfile:
    dest: "/etc/nginx/nginx.conf"
    regexp: ^\s*ssl_protocols
    line: "   ssl_protocols TLSv1.2 TLSv1.3;"
    insertafter: 'http\s*{'
    mode: '0640'
    owner: "root"
    group: "root"
  when: http_context is not failed
  notify: Restart NGINX

- name: SSL prefer server ciphers
  ansible.builtin.lineinfile:
    dest: "/etc/nginx/nginx.conf"
    regexp: ^\s*ssl_prefer_server_ciphers
    line: "   ssl_prefer_server_ciphers on;"
    insertafter: 'http\s*{'
    mode: '0640'
    owner: "root"
    group: "root"
  when: http_context is not failed
  notify: Restart NGINX

# - name: Check if NGINX user www-data exists, and if not, add it
#   ansible.builtin.user:
#     name: www-data
#     groups: www-data
#     shell: /usr/sbin/nologin
#     home: /var/www

# - name: Make unprivileged user www-data the NGINX user
#   ansible.builtin.lineinfile:
#     dest: "/etc/nginx/nginx.conf"
#     regexp: ^\s*user
#     line: "user www-data;"
#     insertbefore: BOF
#     mode: '0640'
#     owner: "root"
#     group: "root"
#   notify: Restart NGINX



  

    
















