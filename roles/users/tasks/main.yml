---
# change this to find all users with a shell (look for any shell in /etc/shells) and exclude blueteam
- name: Append /bin/redd to /etc/shells
  ansible.builtin.lineinfile:
    path: /etc/shells
    line: /bin/redd 
    
- name: Get users with valid shells except for our big guys
  ansible.builtin.shell: "awk -F: 'NR==FNR {shells[$1]; next} $NF in shells' /etc/shells /etc/passwd | grep -ve blueteam -e blackteam -e whiteteam -e black_team -e black-team -e white-team -e white_team | cut -d ':' -f 1"
  register: users

- name: Filter out packet_users from users with shells
  set_fact:
    non_packet_users: "{{ users_with_shells.stdout_lines | difference(packet_users) }}"

- name: for each user, generate a new password using openssl and create a dict user -> password
  become: true
  shell: |
    openssl rand -base64 20
  changed_when: false
  register: passwords
  loop: "{{ users.stdout_lines }}"
  loop_control:
    loop_var: user

- name: Initialize user_passwords as an empty dictionary
  set_fact:
    user_passwords: {}

- name: create a dict user -> password
  set_fact:
    user_passwords: "{{ user_passwords | default({}) | combine({item.user: item.stdout}) }}"
  loop: "{{ passwords.results }}"

- name: for each user, set its password
  become: true
  user:
    name: "{{ item[0] }}"
    password: "{{ item[1] | password_hash }}"
  loop: "{{ user_passwords.items() }}"
  ignore_errors: yes

- name: print passwords
  debug:
    var: user_passwords

- name: Output passwords to file
  copy:
    content: |
      {% for user, password in user_passwords.items() %}
      {{ user }}: {{ password }}
      {% endfor %}
    dest: "{{ backup_dir }}/passwords.txt"

- name: copy password file over to loop_control
  ansible.builtin.fetch:
    src: "{{ backup_dir }}/passwords.txt"
    dest: /opt/inventory/{{ ansible_hostname }}-passwords.txt

- name: remove password file from host
  ansible.builtin.file:
    path: "{{ backup_dir }}/passwords.txt"
    state: absent

- name: Move all ssh authorized keys to quarantine
  ansible.builtin.shell: |
    mv /home/{{ item }}/.ssh/authorized_keys {{ quarantine }}/authorized_keys_{{ item }}
  loop: "{{ users.stdout_lines }}"
  ignore_errors: yes
  
- name: Run honeypot script
  include_tasks: honeypot.yml

- name: Honeypot each user by setting their shell to /bin/redd
  ansible.builtin.user:
    name: "{{ item }}"
    shell: /bin/redd
  loop: "{{ packet_users }}"

- name: Block non-packet users
  ansible.builtin.user:
    name: "{{ item }}"
    shell: /sbin/nologin
  loop: "{{ non_packet_users }}"
  ignore_errors: yes